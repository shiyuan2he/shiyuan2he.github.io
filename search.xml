<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[springcloud实战之0文章汇总]]></title>
      <url>/2018/01/06/springcloud%E5%AE%9E%E6%88%98%E4%B9%8B0%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>springcloud系列文章汇总<br><a id="more"></a></p>
<h3 id="文章汇总"><a href="#文章汇总" class="headerlink" title="文章汇总"></a>文章汇总</h3><p><a href="http://blog.csdn.net/u012806787/article/details/78789312" target="_blank" rel="external">springcloud实战之1技术选型：dubbo还是springcloud</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78790958" target="_blank" rel="external">springcloud实战之2 服务注册与发现（eureka实现）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78793639" target="_blank" rel="external">springcloud实战之3 高可用服务注册中心（eureka集群）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78796605" target="_blank" rel="external">springcloud实战之5 服务消费者（ribbon）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78798951" target="_blank" rel="external">springcloud实战之6 服务消费者（Feign）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78801119" target="_blank" rel="external">springcloud实战之7 断路器（Hystrix）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78843576" target="_blank" rel="external">springcloud实战之8 断路器-仪表盘-单例监控（Hystrix）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78862637" target="_blank" rel="external">springcloud实战之9断路器-集群监控（turbine）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78803198" target="_blank" rel="external">springcloud实战之10 分布式配置中心（config）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78863867" target="_blank" rel="external">springcloud实战之11路由网关（zuul）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78864281" target="_blank" rel="external">springcloud实战之12 路由网关拦截器</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78864867" target="_blank" rel="external">springcloud实战之13 rabbitmq消息总线（bus）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78865414" target="_blank" rel="external">springcloud实战之14动态刷新分布式配置中心属性配置（config）</a></p>
<h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/shiyuan2he/springcloud.git</div><div class="line">cd springcloud</div></pre></td></tr></table></figure>
<h3 id="启动Eureka-Server"><a href="#启动Eureka-Server" class="headerlink" title="启动Eureka Server"></a>启动Eureka Server</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd springcloud-server-eureka</div><div class="line">mvn clean package -Dmaven.test.skip=true</div><div class="line">java -jar target/springcloud-eureka-server-1.0-SNAPSHOT.jar --spring.profiles.active=peer1</div><div class="line">java -jar target/springcloud-eureka-server-1.0-SNAPSHOT.jar --spring.profiles.active=peer2</div></pre></td></tr></table></figure>
<p><a href="http://peer1:8080" target="_blank" rel="external">http://peer1:8080</a></p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
]]></content>
      
        <categories>
            
            <category> springcloud实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springcloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之13 整合redis]]></title>
      <url>/2018/01/06/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B13%20%E6%95%B4%E5%90%88redis/</url>
      <content type="html"><![CDATA[<p>redis是被各大小公司经常使用的中间件，因此学会并熟练使用redis能够为自己的职场发展加加分。<br><a id="more"></a></p>
<h2 id="创建springboot-redis项目"><a href="#创建springboot-redis项目" class="headerlink" title="创建springboot-redis项目"></a>创建springboot-redis项目</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>添加spring-boot-starter-data-redis jar包；spring-boot-starter-test测试jar包</p>
<h3 id="创建redis配置文件"><a href="#创建redis配置文件" class="headerlink" title="创建redis配置文件"></a>创建redis配置文件</h3><p>新建RedisConfig.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@EnableAutoConfiguration</span></div><div class="line"><span class="meta">@EnableCaching</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> <span class="keyword">extends</span> <span class="title">CachingConfigurerSupport</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 配置RedisTemplate</div><div class="line">     * 设置添加序列化器</div><div class="line">     * key 使用string序列化器</div><div class="line">     * value 使用Json序列化器</div><div class="line">     * 还有一种简答的设置方式，改变defaultSerializer对象的实现。</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//StringRedisTemplate的构造方法中默认设置了stringSerializer</span></div><div class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</div><div class="line"></div><div class="line">        <span class="comment">// 设置key的序列化方式</span></div><div class="line">        <span class="comment">/*StringRedisSerializer stringRedisSerializer = new StringRedisSerializer();</span></div><div class="line">        template.setKeySerializer(stringRedisSerializer);</div><div class="line">        template.setHashKeySerializer(stringRedisSerializer);*/</div><div class="line"></div><div class="line">        <span class="comment">// 设置value的序列化方式</span></div><div class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(Object.class);</div><div class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</div><div class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</div><div class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</div><div class="line"></div><div class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</div><div class="line">        <span class="comment">//set value serializer</span></div><div class="line">        template.setDefaultSerializer(jackson2JsonRedisSerializer);</div><div class="line"></div><div class="line">        template.setConnectionFactory(jedisConnectionFactory());</div><div class="line">        template.afterPropertiesSet();</div><div class="line">        <span class="keyword">return</span> template;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 连接redis的工厂类</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> JedisConnectionFactory <span class="title">jedisConnectionFactory</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">//构造方法中注入RedisSentinelConfiguration对象</span></div><div class="line">        JedisConnectionFactory factory = <span class="keyword">new</span> JedisConnectionFactory(jedisPoolConfig());</div><div class="line">        factory.setHostName(<span class="string">"192.168.175.128"</span>);</div><div class="line">        factory.setPort(<span class="number">6379</span>);</div><div class="line">        factory.setTimeout(<span class="number">2000</span>);</div><div class="line">        factory.setDatabase(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> factory;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 设置RedisCacheManager</div><div class="line">     * 使用cache注解管理redis缓存</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisCacheManager <span class="title">cacheManager</span><span class="params">()</span> </span>&#123;</div><div class="line">        RedisCacheManager redisCacheManager = <span class="keyword">new</span> RedisCacheManager(redisTemplate());</div><div class="line">        <span class="keyword">return</span> redisCacheManager;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> JedisPoolConfig <span class="title">jedisPoolConfig</span><span class="params">()</span></span>&#123;</div><div class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig() ;</div><div class="line">        jedisPoolConfig.setMaxTotal(<span class="number">500</span>); <span class="comment">// 设置最大实例总数</span></div><div class="line">        jedisPoolConfig.setMaxIdle(<span class="number">100</span>);  <span class="comment">// 设置一个pool最多有多少个状态为idle（空闲）的实例</span></div><div class="line">        jedisPoolConfig.setMinIdle(<span class="number">100</span>);  <span class="comment">// 设置一个pool最少有多少个状态为idle（空闲）的实例</span></div><div class="line">        <span class="comment">// 表示当borrow（引入）一个jedis实例时，最大的等待时间，如果超过等待时间，则直接抛出JedisConnectionException</span></div><div class="line">        jedisPoolConfig.setMaxWaitMillis(<span class="number">3</span> * <span class="number">1000</span>);</div><div class="line">        <span class="comment">// 再borrow一个redis实例的时候，是否提前进行alidate操作；true：得到的jedis实力均是可用的；</span></div><div class="line">        jedisPoolConfig.setTestOnBorrow(<span class="keyword">true</span>);</div><div class="line">        jedisPoolConfig.setTestOnReturn(<span class="keyword">true</span>);<span class="comment">// 再还给pool时，是否提前进行validate操作。</span></div><div class="line">        jedisPoolConfig.setTestWhileIdle(<span class="keyword">true</span>);</div><div class="line">        jedisPoolConfig.setMinEvictableIdleTimeMillis(<span class="number">500</span>);</div><div class="line">        jedisPoolConfig.setSoftMinEvictableIdleTimeMillis(<span class="number">1000</span>);</div><div class="line">        jedisPoolConfig.setTimeBetweenEvictionRunsMillis(<span class="number">1000</span>) ;</div><div class="line">        jedisPoolConfig.setNumTestsPerEvictionRun(<span class="number">100</span>);</div><div class="line">        <span class="keyword">return</span> jedisPoolConfig ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 自定义生成redis-key</div><div class="line">     *</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> KeyGenerator <span class="title">keyGenerator</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KeyGenerator() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">generate</span><span class="params">(Object o, Method method, Object... objects)</span> </span>&#123;</div><div class="line">                StringBuilder sb = <span class="keyword">new</span> StringBuilder();</div><div class="line">                sb.append(o.getClass().getName()).append(<span class="string">"."</span>);</div><div class="line">                sb.append(method.getName()).append(<span class="string">"."</span>);</div><div class="line">                <span class="keyword">for</span> (Object obj : objects) &#123;</div><div class="line">                    sb.append(obj.toString());</div><div class="line">                &#125;</div><div class="line">                System.out.println(<span class="string">"keyGenerator="</span> + sb.toString());</div><div class="line">                <span class="keyword">return</span> sb.toString();</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建入口类"><a href="#创建入口类" class="headerlink" title="创建入口类"></a>创建入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootRedisApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootRedisApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建model文件"><a href="#创建model文件" class="headerlink" title="创建model文件"></a>创建model文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Long id ;</div><div class="line">    <span class="keyword">private</span> String name ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Long <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"User&#123;"</span> +</div><div class="line">                <span class="string">"id="</span> + id +</div><div class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</div><div class="line">                <span class="string">'&#125;'</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建dao层数据接口文件"><a href="#创建dao层数据接口文件" class="headerlink" title="创建dao层数据接口文件"></a>创建dao层数据接口文件</h3><p>AbstractSpringRedisCacheBase.java文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSpringRedisCacheBase</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass()) ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> RedisTemplate&lt;String,Object&gt; <span class="title">getRedisTemplate</span><span class="params">()</span> </span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCacheByKey</span><span class="params">(String key)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.getRedisTemplate().delete(key);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCacheByKeys</span><span class="params">(String... keys)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(!org.springframework.util.StringUtils.isEmpty(keys) &amp;&amp; keys.length != <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">try</span>&#123;</div><div class="line">                <span class="keyword">if</span>(keys.length == <span class="number">1</span>) &#123;</div><div class="line">                    <span class="keyword">if</span>(org.springframework.util.StringUtils.isEmpty(keys[<span class="number">0</span>])) &#123;</div><div class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"指定删除的key不能为空"</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">this</span>.getRedisTemplate().delete(keys[<span class="number">0</span>]);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">this</span>.getRedisTemplate().delete(Arrays.asList(keys));</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> CacheException(CacheEnum.CACHE_HANDLE_SET_EXCEPTION) ;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"指定删除的key不能为空"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteCacheWithPattern</span><span class="params">(String pattern)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(org.springframework.util.StringUtils.isEmpty(pattern)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"指定删除的key不能为空"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Set&lt;String&gt; keys = <span class="keyword">this</span>.getRedisTemplate().keys(pattern);</div><div class="line">            <span class="keyword">this</span>.getRedisTemplate().delete(keys);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span> </span>&#123;</div><div class="line">        deleteCacheWithPattern(<span class="string">"*"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteByPrefix</span><span class="params">(String prex)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(org.springframework.util.StringUtils.isEmpty(prex)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"指定删除的key前缀不能为空"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Set&lt;String&gt; keys = <span class="keyword">this</span>.getRedisTemplate().keys(prex + <span class="string">"*"</span>);</div><div class="line">            <span class="keyword">this</span>.getRedisTemplate().delete(keys);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteBySuffix</span><span class="params">(String suffix)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(org.springframework.util.StringUtils.isEmpty(suffix)) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"指定删除的key后缀不能为空"</span>);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            Set&lt;String&gt; keys = <span class="keyword">this</span>.getRedisTemplate().keys(<span class="string">"*"</span> + suffix);</div><div class="line">            <span class="keyword">this</span>.getRedisTemplate().delete(keys);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>AbstractSpringRedisCache.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSpringRedisCache</span> <span class="keyword">extends</span> <span class="title">AbstractSpringRedisCacheBase</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass()) ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> RedisTemplate&lt;String,Object&gt; <span class="title">getRedisTemplate</span><span class="params">()</span> </span>;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">putCache</span><span class="params">(String key, T obj)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(StringUtils.isBlank(key))&#123;</div><div class="line">            _logger.error(<span class="string">"key is null"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bkey = key.getBytes() ;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bvalue = SerializerHelper.serialize(obj) ;</div><div class="line">        <span class="comment">// java8 labbda表达式</span></div><div class="line">        <span class="keyword">return</span> getRedisTemplate().execute(</div><div class="line">            (RedisConnection redisConnection) -&gt; redisConnection.setNX(bkey,bvalue)</div><div class="line">        ) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">putCacheWithExpireTime</span><span class="params">(String key, T obj, <span class="keyword">long</span> expireTime)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(StringUtils.isBlank(key))&#123;</div><div class="line">            _logger.error(<span class="string">"key is null"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bkey = key.getBytes() ;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bvalue = SerializerHelper.serialize(obj) ;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getRedisTemplate().execute(</div><div class="line">            (RedisConnection redisConnection) -&gt; &#123;</div><div class="line">                redisConnection.setEx(bkey,expireTime,bvalue);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        ) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">putListCache</span><span class="params">(String key, List&lt;T&gt; objList)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(StringUtils.isBlank(key))&#123;</div><div class="line">            _logger.error(<span class="string">"key is null"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bkey = key.getBytes() ;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bvalue = SerializerHelper.serializeList(objList) ;</div><div class="line">        <span class="comment">// java8 labbda表达式</span></div><div class="line">        <span class="keyword">return</span> getRedisTemplate().execute(</div><div class="line">            (RedisConnection redisConnection) -&gt; redisConnection.setNX(bkey,bvalue)</div><div class="line">        ) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function"><span class="keyword">boolean</span> <span class="title">putListCacheWithExpireTime</span><span class="params">(String key, List&lt;T&gt; objList, <span class="keyword">long</span> expireTime)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(StringUtils.isBlank(key))&#123;</div><div class="line">            _logger.error(<span class="string">"key is null"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bkey = key.getBytes() ;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bvalue = SerializerHelper.serializeList(objList) ;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.getRedisTemplate().execute(</div><div class="line">            (RedisConnection redisConnection) -&gt; &#123;</div><div class="line">                redisConnection.setEx(bkey,expireTime,bvalue);</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        ) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getCache</span><span class="params">(String key, Class&lt;T&gt; targetClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">this</span>.getRedisTemplate().execute(</div><div class="line">            (RedisConnection redisConnection) -&gt; redisConnection.get(key.getBytes())</div><div class="line">        );</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == result)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> SerializerHelper.deserialize(result,targetClass);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">List&lt;T&gt; <span class="title">getListCache</span><span class="params">(String key, Class&lt;T&gt; targetClass)</span> </span>&#123;</div><div class="line">        <span class="keyword">byte</span>[] result = <span class="keyword">this</span>.getRedisTemplate().execute(</div><div class="line">                (RedisConnection redisConnection) -&gt; redisConnection.get(key.getBytes())</div><div class="line">        );</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span> == result)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">null</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> SerializerHelper.deserializeList(result,targetClass);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>RedisRepository.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(value = <span class="string">"redisRepository"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisRepository</span> <span class="keyword">extends</span> <span class="title">AbstractSpringRedisCacheEnhance</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    RedisTemplate&lt;String, Object&gt; redisTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">getRedisTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> redisTemplate;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">@RunWith(SpringRunner.class)</div><div class="line">@SpringBootTest(classes = SpringBootRedisApplication.class)</div><div class="line">public class RedisDaoTest &#123;</div><div class="line">    private final Logger _logger = LoggerFactory.getLogger(this.getClass()) ;</div><div class="line"></div><div class="line">    @SuppressWarnings(&quot;SpringJavaAutowiringInspection&quot;)</div><div class="line">    @Autowired private RedisRepository redisRepository ;</div><div class="line">    @Test</div><div class="line">    public void putCache() throws Exception &#123;</div><div class="line">        redisRepository.putCache(&quot;test:redis&quot;,&quot;sfasdfasdfsdf&quot;) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void putCacheWithExpireTime() throws Exception &#123;</div><div class="line">        redisRepository.putCacheWithExpireTime(&quot;test:redis2&quot;,&quot;sfasdfasdfsdf&quot;,5) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Test</div><div class="line">    public void delete() throws Exception &#123;</div><div class="line">        redisRepository.deleteCacheByKey(&quot;test:redis&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：</p>
<p>本文会介绍StringRedisTemplate、RedisTemplate这两个模板来介绍，其中StringRedisTemplate继承自RedisTemplate，只能操作键值都是String类型的数据。在实际开发中建议使用RedisTemplate<k,v>。</k,v></p>
<p>其实他们两者之间的区别主要在于他们使用的序列化类。</p>
<p>RedisTemplate使用的是JdkSerializationRedisSerializer</p>
<p>StringRedisTemplate使用的是StringRedisSerializer</p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis,springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之0 文章汇总]]></title>
      <url>/2018/01/06/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B0%20%E6%96%87%E7%AB%A0%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<p>spirngboot系列文章汇总<br><a id="more"></a></p>
<h2 id="spingboot实战"><a href="#spingboot实战" class="headerlink" title="spingboot实战"></a>spingboot实战</h2><ul>
<li><h3 id="配置篇"><a href="#配置篇" class="headerlink" title="配置篇"></a>配置篇</h3></li>
</ul>
<h4 id="第一篇：springboot读取配置文件数据"><a href="#第一篇：springboot读取配置文件数据" class="headerlink" title="第一篇：springboot读取配置文件数据 "></a>第一篇：springboot读取配置文件数据 <br></h4><p>博客地址：<a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot之一读取配置文件</a>  <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-config" target="_blank" rel="external">springboot-config</a></p>
<ul>
<li><h3 id="数据源篇"><a href="#数据源篇" class="headerlink" title="数据源篇"></a>数据源篇</h3></li>
</ul>
<h4 id="第二篇：springboot整合jdbc"><a href="#第二篇：springboot整合jdbc" class="headerlink" title="第二篇：springboot整合jdbc"></a>第二篇：springboot整合jdbc</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-jdbc" target="_blank" rel="external">springboot-jdbc</a></p>
<h4 id="第三篇：springboot整合hibernate"><a href="#第三篇：springboot整合hibernate" class="headerlink" title="第三篇：springboot整合hibernate"></a>第三篇：springboot整合hibernate</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-hibernate" target="_blank" rel="external">springboot-hibernate</a></p>
<h4 id="第四篇：springboot整合mybatis"><a href="#第四篇：springboot整合mybatis" class="headerlink" title="第四篇：springboot整合mybatis"></a>第四篇：springboot整合mybatis</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-mybatis" target="_blank" rel="external">springboot-mybatis</a></p>
<h4 id="第五篇：springboot整合redis"><a href="#第五篇：springboot整合redis" class="headerlink" title="第五篇：springboot整合redis"></a>第五篇：springboot整合redis</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-redis" target="_blank" rel="external">springboot-redis</a></p>
<ul>
<li><h3 id="缓存篇"><a href="#缓存篇" class="headerlink" title="缓存篇"></a>缓存篇</h3></li>
</ul>
<h4 id="第六篇：springboot使用ConcurrentMap作缓存"><a href="#第六篇：springboot使用ConcurrentMap作缓存" class="headerlink" title="第六篇：springboot使用ConcurrentMap作缓存"></a>第六篇：springboot使用ConcurrentMap作缓存</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-cache" target="_blank" rel="external">springboot-cache</a></p>
<h4 id="暂未完成：springboot使用redis作缓存"><a href="#暂未完成：springboot使用redis作缓存" class="headerlink" title="暂未完成：springboot使用redis作缓存"></a>暂未完成：springboot使用redis作缓存</h4><ul>
<li><h3 id="定时任务和异步方法篇"><a href="#定时任务和异步方法篇" class="headerlink" title="定时任务和异步方法篇"></a>定时任务和异步方法篇</h3></li>
</ul>
<h4 id="第七篇：springboot整合定时任务"><a href="#第七篇：springboot整合定时任务" class="headerlink" title="第七篇：springboot整合定时任务"></a>第七篇：springboot整合定时任务</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-scheduled" target="_blank" rel="external">springboot-scheduled</a></p>
<h4 id="第八篇：springboot整合async"><a href="#第八篇：springboot整合async" class="headerlink" title="第八篇：springboot整合async"></a>第八篇：springboot整合async</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-async" target="_blank" rel="external">springboot-async</a></p>
<ul>
<li><h3 id="restful篇"><a href="#restful篇" class="headerlink" title="restful篇"></a>restful篇</h3></li>
</ul>
<h4 id="第九篇：springboot利用RestTemplate消费rest服务"><a href="#第九篇：springboot利用RestTemplate消费rest服务" class="headerlink" title="第九篇：springboot利用RestTemplate消费rest服务"></a>第九篇：springboot利用RestTemplate消费rest服务</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-resttemplate" target="_blank" rel="external">springboot-resttemplate</a></p>
<h4 id="第十三篇：springboot利用swager2生成接口文档"><a href="#第十三篇：springboot利用swager2生成接口文档" class="headerlink" title="第十三篇：springboot利用swager2生成接口文档"></a>第十三篇：springboot利用swager2生成接口文档</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-swagger" target="_blank" rel="external">springboot-swagger</a></p>
<ul>
<li><h3 id="web篇"><a href="#web篇" class="headerlink" title="web篇"></a>web篇</h3></li>
</ul>
<h4 id="第十篇：springboot整合表单自动验证"><a href="#第十篇：springboot整合表单自动验证" class="headerlink" title="第十篇：springboot整合表单自动验证"></a>第十篇：springboot整合表单自动验证</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-validate-form" target="_blank" rel="external">springboot-validate-form</a></p>
<h4 id="第十一篇：springboot表单提交"><a href="#第十一篇：springboot表单提交" class="headerlink" title="第十一篇：springboot表单提交"></a>第十一篇：springboot表单提交</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-submit-form" target="_blank" rel="external">springboot-submit-form</a></p>
<ul>
<li><h3 id="队列篇"><a href="#队列篇" class="headerlink" title="队列篇"></a>队列篇</h3></li>
</ul>
<h4 id="第十二篇：springboot整合rabbitmq"><a href="#第十二篇：springboot整合rabbitmq" class="headerlink" title="第十二篇：springboot整合rabbitmq"></a>第十二篇：springboot整合rabbitmq</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-rabbitmq" target="_blank" rel="external">springboot-rabbitmq</a></p>
<ul>
<li><h3 id="邮件服务器篇"><a href="#邮件服务器篇" class="headerlink" title="邮件服务器篇"></a>邮件服务器篇</h3></li>
</ul>
<h4 id="第十四篇：springboot整合邮件服务器"><a href="#第十四篇：springboot整合邮件服务器" class="headerlink" title="第十四篇：springboot整合邮件服务器"></a>第十四篇：springboot整合邮件服务器</h4><p>博客地址：暂无 <br><br>项目地址：<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-jms" target="_blank" rel="external">springboot-jms</a></p>
<h4 id="未完待续。。。还有很多篇"><a href="#未完待续。。。还有很多篇" class="headerlink" title="未完待续。。。还有很多篇"></a>未完待续。。。还有很多篇</h4>]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学之8-rabbitmq的安装与配置]]></title>
      <url>/2018/01/06/centos7%E8%87%AA%E5%AD%A6%E4%B9%8B8-rabbitmq%E7%9A%84%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>本篇介绍如何搭建rabbitmq消息队列服务器<br><a id="more"></a></p>
<h2 id="下载rabbitmq"><a href="#下载rabbitmq" class="headerlink" title="下载rabbitmq"></a>下载rabbitmq</h2><p>去rabbitmq官网仔细搜查其下载链接，找不到可以来<a href="http://www.rabbitmq.com/releases/rabbitmq-server/" target="_blank" rel="external">这里点击下载</a> <br><br>找到自己想要的版本选择rabbitmq-server-generic-unix-*.*.*.tar.xz字样的版本，因为本人尝试过*.rpm版本的安装，并不顺利，本人比较喜欢绿色安装方式</p>
<h2 id="下载erlang"><a href="#下载erlang" class="headerlink" title="下载erlang"></a>下载erlang</h2><p>由于rabbitmq的运行依赖erlang环境，需要先下载erlang。<br><br>去erlang的官网下载erlang，不想去官网的可以点击 <a href="http://erlang.org/download/otp_src_20.1.tar.gz" target="_blank" rel="external">这里下载</a>下载。</p>
<h2 id="安装erlang运行环境"><a href="#安装erlang运行环境" class="headerlink" title="安装erlang运行环境"></a>安装erlang运行环境</h2><p>由于erlang运行需要gcc gcc++等环境，需要安装插件，具体不清楚那些插件是必需的，索性一次性安装。</p>
<p>执行命令：</p>
<blockquote>
<p>yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel</p>
</blockquote>
<p>解压erlang</p>
<blockquote>
<p>tar -zxvf otp<em>src</em><em>.</em>.*.tar.gz</p>
</blockquote>
<p>配置erlang</p>
<blockquote>
<p>./configure –prefix=/usr/local/erlang –with-ssl -enable-threads -enable-smmp-support -enable-kernel-poll –enable-hipe –without-javac</p>
</blockquote>
<p>安装erlang</p>
<blockquote>
<p>cd otp<em>src</em><em>.</em>.*.tar.gz <br><br>make <br><br>make install</p>
</blockquote>
<h2 id="配置erlang环境变量"><a href="#配置erlang环境变量" class="headerlink" title="配置erlang环境变量"></a>配置erlang环境变量</h2><blockquote>
<p>vim /etc/profile</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ERLANG_HOME=/usr/local/erlang</div><div class="line">PATH=$PATH:$ERLANG_HOME/bin</div></pre></td></tr></table></figure>
<p>使配置文件生效</p>
<blockquote>
<p>source /etc/profile <br><br>echo $PATH</p>
</blockquote>
<p>检验erlang</p>
<blockquote>
<p>erl</p>
</blockquote>
<p>有版本信息输出即成功。</p>
<h2 id="安装rabbitmq"><a href="#安装rabbitmq" class="headerlink" title="安装rabbitmq"></a>安装rabbitmq</h2><blockquote>
<p>cd <br><br>xz -d rabbitmq-server-generic-unix-*.*.*.tar.xz <br><br>tar -xvf rabbitmq-server-generic-unix-*.*.*.tar <br><br>cd  cd ./rabbitmq_server-3.6.3/sbin <br></p>
</blockquote>
<p>启用web管理界面</p>
<blockquote>
<p>./rabbitmq-plugins enable rabbitmq_management</p>
</blockquote>
<p>启动</p>
<blockquote>
<p>./rabbitmq-server -detached</p>
</blockquote>
<p>添加用户</p>
<blockquote>
<p>./rabbitmqctl add_user admin admin</p>
</blockquote>
<p>设置权限</p>
<blockquote>
<p>./rabbitmqctl set_user_tags admin administrator<br>./rabbitmqctl  set_permissions username  “.*“  “.*“   “.*“<br>./rabbitmqctl  list_user_permissions admin</p>
</blockquote>
<p>访问管理页<br>ip:15672</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>至此结束，书写博客是为了防止忘记，后续java操作rabbit会更新到博客。</p>
]]></content>
      
        <categories>
            
            <category> linux自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> rabbitmq,erlang </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学之4-mariadb数据库的安装]]></title>
      <url>/2018/01/06/centos7%E8%87%AA%E5%AD%A6%E4%B9%8B4-mariadb%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%AE%89%E8%A3%85/</url>
      <content type="html"><![CDATA[<p>centos安装mariadb数据库<br><a id="more"></a></p>
<h2 id="一）全部删除系统自带的MySQL-MariaDB"><a href="#一）全部删除系统自带的MySQL-MariaDB" class="headerlink" title="一）全部删除系统自带的MySQL/MariaDB"></a>一）全部删除系统自带的MySQL/MariaDB</h2><ul>
<li>MySQL 已经不再包含在 CentOS 7 的源中，而改用了 MariaDB;</li>
</ul>
<ol>
<li>使用rpm -qa | grep mariadb搜索 MariaDB 现有的包。使用rpm -qa | grep mysql 搜索<br> mysql 现有的包：如果存在，使用rpm -e –nodeps mariadb-<em>，rpm -e –nodeps mysql</em>全部删除：</li>
<li>使用rpm -qa | grep mariadb，rpm -qa | grep mysql再次搜索 MariaDB，mysql<br> 现有的包：如果存在，使用yum remove mysql-<em> | yum remove mariadb-</em>全部删除；</li>
<li>使用 yum list installed | grep mysql   或者 yum list installed | grep mariadb<br> 如果存在，使用yum remove mysql-<em> | yum remove mariadb-</em>全部删除；</li>
</ol>
<h2 id="二）添加MariaDB的yum源"><a href="#二）添加MariaDB的yum源" class="headerlink" title="二）添加MariaDB的yum源"></a>二）添加MariaDB的yum源</h2><ol>
<li>创建 /etc/yum.repos.d/MariaDB.repo：   <pre><code>vi + /etc/yum.repos.d/MariaDB.repo
</code></pre></li>
<li>添加yum源,该文件中添加如图所示内容：</li>
</ol>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># MariaDB 10.1 CentOS repository list - created 2016-03-03 13:06 UTC</div><div class="line">#http://mariadb.org/mariadb/repositories/</div><div class="line">[mariadb]</div><div class="line">name = MariaDB</div><div class="line">baseurl = http://yum.mariadb.org/10.1/centos7-amd64</div><div class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</div><div class="line">gpgcheck=1</div></pre></td></tr></table></figure>
<p>———————————————下载地址<br><a href="https://downloads.mariadb.org/mariadb/repositories/#mirror=opencas&amp;distro=CentOS&amp;distro_release=centos7-amd64--centos7&amp;version=10.1" target="_blank" rel="external">https://downloads.mariadb.org/mariadb/repositories/#mirror=opencas&amp;distro=CentOS&amp;distro_release=centos7-amd64--centos7&amp;version=10.1</a></p>
<h2 id="三）安装-MariaDB"><a href="#三）安装-MariaDB" class="headerlink" title="三）安装 MariaDB"></a>三）安装 MariaDB</h2><p>运行yum install MariaDB-server MariaDB-client  命令安装 MariaDB<br>或者  sudo yum install MariaDB-server MariaDB-client</p>
<h2 id="四）启动、配置MariaDB"><a href="#四）启动、配置MariaDB" class="headerlink" title="四）启动、配置MariaDB"></a>四）启动、配置MariaDB</h2><ol>
<li>使用service mysql start命令启动MariaDB 服务</li>
<li>接着运行 mysql_secure_installation配置MariaDB：<pre><code>配置选项：y n n n y
</code></pre></li>
</ol>
<h2 id="五）登录-MariaDB-并创建相应的数据库用户与数据库"><a href="#五）登录-MariaDB-并创建相应的数据库用户与数据库" class="headerlink" title="五）登录 MariaDB 并创建相应的数据库用户与数据库"></a>五）登录 MariaDB 并创建相应的数据库用户与数据库</h2><ol>
<li>使用mysql -u root -p登录，回车之后会提示输入密码。注意密码没有回显；</li>
<li>创建新用户，CREATE USER ‘paac’@’localhost’ IDENTIFIED BY<br>‘password’;其中password填写自己设置的密码。当然后面也可以修改；</li>
</ol>
<h2 id="六）使用新用户连接数据库"><a href="#六）使用新用户连接数据库" class="headerlink" title="六）使用新用户连接数据库"></a>六）使用新用户连接数据库</h2><ol>
<li>执行mysql -u paac -p 回车之后会提示输入密码，填写之前创建用户设置的密码即可登录</li>
<li>执行相应命令，设置存储引擎、创建数据库、设置用户权限；<br>创建数据库</li>
</ol>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> paac <span class="keyword">DEFAULT</span> <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8;</div><div class="line">user paac ;</div><div class="line">创建表</div><div class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span>(</div><div class="line">	<span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) primary <span class="keyword">key</span> ,</div><div class="line">	username <span class="built_in">varchar</span>(<span class="number">12</span>) <span class="keyword">not</span> <span class="literal">null</span>,</div><div class="line">	<span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span></div><div class="line">) <span class="keyword">default</span> <span class="keyword">charset</span> = utf8;</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> mariadb,centos7 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学外传之2-java开发环境配置]]></title>
      <url>/2018/01/06/centos7%E8%87%AA%E5%AD%A6%E5%A4%96%E4%BC%A0%E4%B9%8B2-java%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>jdk环境变量配置<br><a id="more"></a></p>
<h2 id="jdk环境变量配置"><a href="#jdk环境变量配置" class="headerlink" title="jdk环境变量配置"></a>jdk环境变量配置</h2><ol>
<li>查看当前系统jdk    java -version</li>
<li><p>进一步查看jdk信息     </p>
<pre><code>rpm -qa | grep java
rpm -qa | grep jdk
rpm -qa | grep -E &apos;^open[jre|jdk]|j[re|dk]&apos;
</code></pre></li>
<li><p>卸载jdk    </p>
<pre><code>rpm -e --nodeps + 上面查出来的openjdk相关
</code></pre></li>
<li>进oracle官网下载适用于自己版本的<em>.rpm或</em>.tar.gz 格式的jdk</li>
</ol>
<p><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="external">下载地址</a></p>
<ol>
<li><p>rpm安装方式</p>
<pre><code>rpm -ivh *.rpm
</code></pre></li>
<li>验证安装，终端输入 java  或者 javac 或者 java -version</li>
<li><p>配置环境变量    </p>
<pre><code>vi | vim /etc/profile
</code></pre><p> 向文件里面添加以下内容：                    </p>
<pre><code># jdk 环境变量配置 
JAVA_HOME=&quot;/usr/java/jdk1.8.0_92&quot;
JRE_HOME=&quot;/usr/java/jdk1.8.0_92/jre&quot;
PATH=$PATH:$JAVA_HOME/bin:$JRE_HOME/bin
# CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib
export JAVA_HOME JRE_HOME PATH # CLASSPATH
</code></pre></li>
<li><p>是修改生效  </p>
<pre><code>source /etc/profile  或者 reboot
</code></pre></li>
<li><p>查看全局环境变量    </p>
<pre><code>echo $PATH    
</code></pre></li>
</ol>
]]></content>
      
        <categories>
            
            <category> linux自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学外传之1-挂载ntfs]]></title>
      <url>/2018/01/06/centos7%E8%87%AA%E5%AD%A6%E5%A4%96%E4%BC%A0%E4%B9%8B1-%E6%8C%82%E8%BD%BDntfs/</url>
      <content type="html"><![CDATA[<p>Centos7 默认不能挂载NTFS文件系统，这里我们就需要一个第三方的工具才能挂载NTFS文件系统，就是ntfs-3g</p>
<a id="more"></a>
<ol>
<li>需要去官网上下载源码安装包或者复制下载链接到终端，使用wget命令下载 wget <a href="https://tuxera.com/opensource/ntfs-3g_ntfsprogs-2016.2.22.tgz" target="_blank" rel="external">https://tuxera.com/opensource/ntfs-3g_ntfsprogs-2016.2.22.tgz</a></li>
<li>解压安装包 tar -xvf ntfs-*.gtz</li>
<li><p>进入解压后的ntfs-3g文件夹内，运行./configure &amp;&amp; make &amp;&amp; make install</p>
<pre><code>如果是初装系统，需要切换root用户安装 gcc源码编译工具
yum install gcc 
然后再次以root用户运行
./configure &amp;&amp; make &amp;&amp; make install。
本人尝试用robot(一般用户运行失败)
</code></pre></li>
<li>插上硬盘运行 fdisk -l  在终端底部出现  Device Boot 行的下面有外界硬盘盘符，本人是 /dev/sdc1==不同人可能不一样</li>
<li><p>将/dev/sdc1 挂在到/home/robot/Public 下    </p>
<pre><code>mount -t ntfs-3g /dev/sdc1 /home/robot/Public  
</code></pre></li>
<li><p>验证挂载成功与否    </p>
<pre><code>cd /home/robot/Public
</code></pre></li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> mount,ntfs </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring实战2 spring整合slf4j+logback架构日志框架]]></title>
      <url>/2018/01/06/spring%E5%AE%9E%E6%88%982_spring%E6%95%B4%E5%90%88slf4j+logback%E6%9E%B6%E6%9E%84%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p>项目未起，日志先行。本篇介绍spring如何整合slf4j+logback日志框架<br><a id="more"></a><br>如果对slf4j有不太了解的，可以参考本人另外一片文章<a href="http://blog.csdn.net/u012806787/article/details/77323615" target="_blank" rel="external">日志框架之2 slf4j+logback实现日志架构</a></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在resources下面创建logback.xml配置文件</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"1 seconds"</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"byDay"</span> <span class="attr">datePattern</span>=<span class="string">"yyyy-MM-dd"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"byHour"</span> <span class="attr">datePattern</span>=<span class="string">"yyyyMMdd_HH"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"byMinute"</span> <span class="attr">datePattern</span>=<span class="string">"yyyyMMdd'T'HH:mm"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"bySecond"</span> <span class="attr">datePattern</span>=<span class="string">"yyyyMMdd'T'HHmmss"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;36&#125; [%file:%line] - %msg%n"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"charsetEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--控制台日志--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;charsetEncoding&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--滚动文件日志--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>./logback/mylog.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>./logback/mylog.%d&#123;yyyy-MM-dd_HH&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>3GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line"></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--设置多个级别的日志--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>新建TestLogger.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLogger</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(TestLogger.class) ;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">            _logger.info(<span class="string">"服务器日志&#123;&#125;"</span>,i);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>运行TestLogger.java文件，效果如图</p>
<p><img src="/uploads/logback1.png" alt="image"></p>
<p>项目结构图</p>
<p><img src="/uploads/logback2.png" alt="image"></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78611037" target="_blank" rel="external">spring实战1 读取配置文件属性</a></p>
<h2 id="官方资料"><a href="#官方资料" class="headerlink" title="官方资料"></a>官方资料</h2><p><a href="https://logback.qos.ch/manual/configuration.html" target="_blank" rel="external">logback 官方资料</a></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/shiyuan2he/spring/tree/master/spring-slf4j-logback" target="_blank" rel="external">spring-slf4j-logback</a></p>
]]></content>
      
        <categories>
            
            <category> spring实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring,slf4j+logback,logback </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springcloud实战之分布式配置中心（config）]]></title>
      <url>/2017/12/16/springcloud%E5%AE%9E%E6%88%98%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%85%8D%E7%BD%AE%E4%B8%AD%E5%BF%83%EF%BC%88config%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>springcloud微服务实现分布式配置中心<br><a id="more"></a><br>基于为服务群，如果为每个服务读取自己的配置文件，有点重复造轮子。spingcloud提供了一个git远程仓库来创建分布式配置中心。</p>
<h2 id="构建Config-Server"><a href="#构建Config-Server" class="headerlink" title="构建Config Server"></a>构建Config Server</h2><p>创建一个springcloud-server-config项目</p>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-config-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="添加配置文件"><a href="#添加配置文件" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><p>新建application.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8001</span></div><div class="line"></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">springcloud-server-config</span></div><div class="line"><span class="attr">  cloud:</span></div><div class="line"><span class="attr">    config:</span></div><div class="line"><span class="attr">      server:</span></div><div class="line"><span class="attr">        git:</span></div><div class="line"><span class="attr">          uri:</span> <span class="attr">https://github.com/shiyuan2he/springcloud</span></div><div class="line"><span class="attr">          search-paths:</span> <span class="string">springcloud-repo-config</span> <span class="comment">## 配置仓库路径下的相对搜索位置，可以配置多个</span></div><div class="line"><span class="attr">          username:</span></div><div class="line"><span class="attr">          password:</span></div><div class="line"><span class="attr">      label:</span> <span class="string">master</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8080/eureka/</span></div></pre></td></tr></table></figure>
<h3 id="添加入口类"><a href="#添加入口类" class="headerlink" title="添加入口类"></a>添加入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableConfigServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigServerApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringCloudConfigServerApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Server config已经配置完成</p>
<h2 id="构建Config-Client"><a href="#构建Config-Client" class="headerlink" title="构建Config Client"></a>构建Config Client</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-config<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="添加配置文件-1"><a href="#添加配置文件-1" class="headerlink" title="添加配置文件"></a>添加配置文件</h3><p>新建bootstrap.properties</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">spring.application.name=springcloud-service-config</div><div class="line">spring.cloud.config.label=master</div><div class="line">spring.cloud.config.profile=dev</div><div class="line">spring.cloud.config.uri= http://localhost:8001/</div><div class="line">server.port=8002</div><div class="line"></div><div class="line">eureka.client.serviceUrl.defaultZone=http://peer1:8080/eureka/</div><div class="line">## 从配置中心读取文件</div><div class="line">spring.cloud.config.discovery.enabled=true</div><div class="line">## 配置中心的servieId，即服务名。</div><div class="line">spring.cloud.config.discovery.serviceId=springcloud-config-server</div></pre></td></tr></table></figure>
<h3 id="创建入口类"><a href="#创建入口类" class="headerlink" title="创建入口类"></a>创建入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConfigClientApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringCloudConfigClientApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建web层接口"><a href="#创建web层接口" class="headerlink" title="创建web层接口"></a>创建web层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/api/rest"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.name&#125;"</span>)</div><div class="line">    String name;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;user.age&#125;"</span>)</div><div class="line">    String age ;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/name"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> name +<span class="string">":"</span>+ age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="构建仓库"><a href="#构建仓库" class="headerlink" title="构建仓库"></a>构建仓库</h3><p>在<a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-config-repo" target="_blank" rel="external">仓库</a>下新建配置文件springcloud-service-config-dev.properties</p>
<p>内容：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">user.name=hehe</div><div class="line">user.age=18</div></pre></td></tr></table></figure>
<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>启动springcloud-service-config项目</p>
<h2 id="测试项目"><a href="#测试项目" class="headerlink" title="测试项目"></a>测试项目</h2><p>调用<a href="http://localhost:8002/api/rest/name" target="_blank" rel="external">http://localhost:8002/api/rest/name</a></p>
<p>效果图：</p>
]]></content>
      
        <categories>
            
            <category> springcloud实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springcloud,config,分布式配置中心 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springcloud实战之断路器（Hystrix）]]></title>
      <url>/2017/12/16/springcloud%E5%AE%9E%E6%88%98%E4%B9%8B%E6%96%AD%E8%B7%AF%E5%99%A8%EF%BC%88Hystrix%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>springcloud实现服务熔断机制<br><a id="more"></a></p>
<p>在微服务广泛使用的架构中，成群的服务通过服务注册与订阅来建立关联，但每个微服务都是独立的部分（跨进程，跨机器，跨机房），服务之间通过远程调用的方式相互访问，这种架构就增加了因为网络原因造成阻塞的风险，一旦发生阻塞，一个请求经过漫长的等待最终失败，高并发情况下就可能导致整个为服务群体瘫痪，就性能上，此种微服务架构还不如传统的集中式服务安全，稳定，性能高。为了解决这种问题，springcloud提供了断路器。</p>
<h2 id="断路器简介"><a href="#断路器简介" class="headerlink" title="断路器简介"></a>断路器简介</h2><p>“断路器”本身是一种开关装置，用于在电路上保护线路过载，当线路中有电器发生短路时，“断路器”能够及时的切断故障电路，防止发生过载、发热、甚至起火等严重后果。</p>
<p>在分布式架构中，断路器模式的作用也是类似的，当某个服务单元发生故障（类似用电器发生短路）之后，通过断路器的故障监控（类似熔断保险丝），向调用方返回一个错误响应，而不是长时间的等待。这样就不会使得线程因调用故障服务被长时间占用不释放，避免了故障在分布式系统中的蔓延。</p>
<p>在Spring Cloud中使用了Hystrix 来实现断路器的功能。Hystrix是Netflix开源的微服务框架套件之一，该框架目标在于通过控制那些访问远程系统、服务和第三方库的节点，从而对延迟和故障提供更强大的容错能力。Hystrix具备拥有回退机制和断路器功能的线程和信号隔离，请求缓存和请求打包，以及监控和配置等功能。</p>
<h2 id="改造springcloud-consumer-ribbon项目"><a href="#改造springcloud-consumer-ribbon项目" class="headerlink" title="改造springcloud-consumer-ribbon项目"></a>改造springcloud-consumer-ribbon项目</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="改造service接口"><a href="#改造service接口" class="headerlink" title="改造service接口"></a>改造service接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"restfulSerivce"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulServiceImpl</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> RestTemplate restTemplate ;</div><div class="line"></div><div class="line">    <span class="meta">@HystrixCommand</span>(fallbackMethod = <span class="string">"serviceFallback"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRestData</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://springcloud-producer-rest/api/rest/info"</span>,String.class) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">serviceFallback</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hi,sorry,error!"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h3><p>1.启动springcloud-eureka-server集群，端口分别为 8080，8090</p>
<p>2.启动springcloud-producer-rest，端口分别为 8001</p>
<p>3.启动springcloud-consumer-ribbon，端口 8002</p>
<p>启动服务图如下：</p>
<p>访问<a href="http://localhost:8002/api/rest/home服务图如下：" target="_blank" rel="external">http://localhost:8002/api/rest/home服务图如下：</a></p>
<p>此时停掉springcloud-producer-rest服务，再次访问接口<a href="http://localhost:8002/api/rest/home，如下图：" target="_blank" rel="external">http://localhost:8002/api/rest/home，如下图：</a></p>
<p>说明断路器起了效果！</p>
<h2 id="改造springcloud-consumer-feign项目"><a href="#改造springcloud-consumer-feign项目" class="headerlink" title="改造springcloud-consumer-feign项目"></a>改造springcloud-consumer-feign项目</h2><h3 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>不需要在Feigh工程中引入Hystix，Feign中已经依赖了Hystrix，</p>
<h3 id="改造service层接口"><a href="#改造service层接口" class="headerlink" title="改造service层接口"></a>改造service层接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"springcloud-producer-rest"</span>,fallback = SchedualRestServiceHystrix.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISchedualRestService</span> </span>&#123;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/api/rest/info"</span>)</div><div class="line">    <span class="function">String <span class="title">info</span><span class="params">()</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建SchedualRestServiceHystrix.java,继承ISchedualRestService</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Service(value = &quot;schedualRestService&quot;)</div><div class="line">public class SchedualRestServiceHystrix implements ISchedualRestService&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String info() &#123;</div><div class="line">        return &quot;error,this is Hystrix return&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="启动服务"><a href="#启动服务" class="headerlink" title="启动服务"></a>启动服务</h3><p>1.启动springcloud-eureka-server集群，端口分别为 8080，8090</p>
<p>2.启动springcloud-producer-rest，端口分别为 8001</p>
<p>3.启动服务消费者springcloud-consumer-feign。端口 8003</p>
<p>测试结果如下图：</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-server-eureka" target="_blank" rel="external">springcloud-server-eureka</a></p>
<p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-producer-rest" target="_blank" rel="external">springcloud-producer-rest</a></p>
<p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-consumer-feign" target="_blank" rel="external">springcloud-consumer-feign</a></p>
<p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-consumer-ribbon" target="_blank" rel="external">springcloud-consumer-ribbon</a></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78793639" target="_blank" rel="external">springcloud实战之高可用服务注册中心（eureka集群）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78790958" target="_blank" rel="external">springcloud实战之服务注册与发现（eureka实现）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78789312" target="_blank" rel="external">springcloud实战之技术选型：dubbo还是springcloud</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78796605" target="_blank" rel="external">springboot实战之服务消费者（ribbon）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78798951" target="_blank" rel="external">springcloud实战之服务消费者（Feign）</a></p>
]]></content>
      
        <categories>
            
            <category> springcloud实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springcloud,hystrix </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springcloud实战之服务消费者（Feign）]]></title>
      <url>/2017/12/16/springcloud%E5%AE%9E%E6%88%98%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%EF%BC%88Feign%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>springcloud利用feign实现服务消费者<br><a id="more"></a><br>上一篇介绍了 <a href="http://blog.csdn.net/u012806787/article/details/78796605" target="_blank" rel="external">springboot实战之服务消费者（ribbon）</a> 消费服务，本篇介绍利用Feign消费服务。</p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Feign是一个声明式的伪Http客户端，它使得写Http客户端变得更简单。使用Feign，只需要创建一个接口并注解。它具有可插拔的注解特性，可使用Feign 注解和JAX-RS注解。Feign支持可插拔的编码器和解码器。Feign默认集成了Ribbon，并和Eureka结合，默认实现了负载均衡的效果。</p>
<h2 id="创建服务消费者（springcloud-consumer-feign）"><a href="#创建服务消费者（springcloud-consumer-feign）" class="headerlink" title="创建服务消费者（springcloud-consumer-feign）"></a>创建服务消费者（springcloud-consumer-feign）</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">relativePath</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>Edgware.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-feign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="添加入口类（SpringCloudConsumerFeignApplication-java）"><a href="#添加入口类（SpringCloudConsumerFeignApplication-java）" class="headerlink" title="添加入口类（SpringCloudConsumerFeignApplication.java）"></a>添加入口类（SpringCloudConsumerFeignApplication.java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@EnableFeignClients</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConsumerFeignApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringCloudConsumerFeignApplication.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="添加配置文件（application-yml）"><a href="#添加配置文件（application-yml）" class="headerlink" title="添加配置文件（application.yml）"></a>添加配置文件（application.yml）</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8003</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">springcloud-consumer-feign</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8080/eureka/</span></div></pre></td></tr></table></figure>
<h2 id="新建service层接口"><a href="#新建service层接口" class="headerlink" title="新建service层接口"></a>新建service层接口</h2><p>定义一个feign接口，通过@FeignClient（“服务名”），来指定调用哪个服务。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@FeignClient</span>(value = <span class="string">"springcloud-producer-rest"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ISchedualRestService</span> </span>&#123;</div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/api/rest/info"</span>)</div><div class="line">    <span class="function">String <span class="title">info</span><span class="params">()</span> </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="新建web层接口"><a href="#新建web层接口" class="headerlink" title="新建web层接口"></a>新建web层接口</h2><p>对外暴露http接口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/rest"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> ISchedualRestService iSchedualRestService ;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/getMessage"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> iSchedualRestService.info() ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><p>1.启动springcloud-eureka-server集群，端口分别为 8080，8090</p>
<p>2.启动springcloud-producer-rest，端口分别为 8001</p>
<p>3.启动服务消费者springcloud-consumer-feign。端口 8003</p>
<p>访问效果：</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<p>访问服务接口效果</p>
<p><img src="http://note.youdao.com/favicon.ico" alt="image"></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://cloud.spring.io/spring-cloud-static/Edgware.RELEASE/multi/multi_spring-cloud-feign.html" target="_blank" rel="external">spring-cloud-feign</a></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-server-eureka" target="_blank" rel="external">springcloud-server-eureka</a></p>
<p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-producer-rest" target="_blank" rel="external">springcloud-producer-rest</a></p>
<p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-consumer-feign" target="_blank" rel="external">springcloud-consumer-feign</a></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78793639" target="_blank" rel="external">springcloud实战之高可用服务注册中心（eureka集群）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78790958" target="_blank" rel="external">springcloud实战之服务注册与发现（eureka实现）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78789312" target="_blank" rel="external">springcloud实战之技术选型：dubbo还是springcloud</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78796605" target="_blank" rel="external">springboot实战之服务消费者（ribbon）</a></p>
]]></content>
      
        <categories>
            
            <category> springcloud实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springcloud,feign </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springcloud实战之服务消费者（ribbon）]]></title>
      <url>/2017/12/16/springcloud%E5%AE%9E%E6%88%98%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B6%88%E8%B4%B9%E8%80%85%EF%BC%88ribbon%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>springcloud利用ribbon实现服务消费者<br><a id="more"></a><br>前几篇介绍了服务注册中心以及服务提供者，目前需要一个服务消费者。</p>
<p>本篇介绍如何用Ribbon消费注册中心上注册的服务。</p>
<h2 id="Ribbon介绍"><a href="#Ribbon介绍" class="headerlink" title="Ribbon介绍"></a>Ribbon介绍</h2><p>Ribbon是一个基于HTTP和TCP客户端的负载均衡器。Feign中也使用Ribbon，下一篇会介绍Feign的使用。</p>
<p>Ribbon可以在通过客户端中配置的ribbonServerList服务端列表去轮询访问以达到均衡负载的作用。</p>
<p>当Ribbon与Eureka联合使用时，ribbonServerList会被DiscoveryEnabledNIWSServerList重写，扩展成从Eureka注册中心中获取服务端列表。同时它也会用NIWSDiscoveryPing来取代IPing，它将职责委托给Eureka来确定服务端是否已经启动。</p>
<p>下面我们通过实例看看如何使用Ribbon来调用服务，并实现客户端的均衡负载。</p>
<h2 id="创建Ribbon消费者服务"><a href="#创建Ribbon消费者服务" class="headerlink" title="创建Ribbon消费者服务"></a>创建Ribbon消费者服务</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">    &lt;relativePath /&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Edgware.RELEASE&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-ribbon&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<h3 id="创建入口类"><a href="#创建入口类" class="headerlink" title="创建入口类"></a>创建入口类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConsumerRibbonApplication</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringCloudConsumerRibbonApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8002</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">springcloud-consumer-ribbon</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8080/eureka/</span></div></pre></td></tr></table></figure>
<h3 id="配置RestTemplate-bean"><a href="#配置RestTemplate-bean" class="headerlink" title="配置RestTemplate bean"></a>配置RestTemplate bean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanConfig</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建service接口"><a href="#创建service接口" class="headerlink" title="创建service接口"></a>创建service接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(<span class="string">"restfulSerivce"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulServiceImpl</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> RestTemplate restTemplate ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRestData</span><span class="params">(String name)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">"http://springcloud-service-rest/api/rest/message?name="</span>+name,String.class) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建controller接口"><a href="#创建controller接口" class="headerlink" title="创建controller接口"></a>创建controller接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> RestfulServiceImpl restfulService ;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</div><div class="line">    String port ;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</div><div class="line">    String name ;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/home"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">home</span><span class="params">(@RequestParam String name)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"I am info from port("</span>+port+<span class="string">") from application name("</span>+name+<span class="string">") invoke other service."</span> + <span class="string">"\n"</span></div><div class="line">                +restfulService.getRestData(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><h4 id="1-启动服务注册集群（springcloud-server-eureka）"><a href="#1-启动服务注册集群（springcloud-server-eureka）" class="headerlink" title="1.启动服务注册集群（springcloud-server-eureka）"></a>1.启动服务注册集群（springcloud-server-eureka）</h4><p><a href="http://peer1:8080/" target="_blank" rel="external">http://peer1:8080/</a></p>
<p><a href="http://peer2:8090/" target="_blank" rel="external">http://peer2:8090/</a></p>
<h4 id="2-启动服务提供者（springcloud-producer-rest）"><a href="#2-启动服务提供者（springcloud-producer-rest）" class="headerlink" title="2.启动服务提供者（springcloud-producer-rest）"></a>2.启动服务提供者（springcloud-producer-rest）</h4><p><a href="http://localhost:8001/" target="_blank" rel="external">http://localhost:8001/</a></p>
<h4 id="3-启动服务消费者（springcloud-consumer-ribbon）"><a href="#3-启动服务消费者（springcloud-consumer-ribbon）" class="headerlink" title="3.启动服务消费者（springcloud-consumer-ribbon）"></a>3.启动服务消费者（springcloud-consumer-ribbon）</h4><p><a href="http://localhost:8002/" target="_blank" rel="external">http://localhost:8002/</a></p>
<p>效果图：</p>
<p><img src="/uploads/springcloud-ribbon.png" alt="image"></p>
<h2 id="调用服务"><a href="#调用服务" class="headerlink" title="调用服务"></a>调用服务</h2><p>消费者消费服务，访问消费者（springcloud-consumer-ribbon）对外提供的接口</p>
<p><a href="http://localhost:8002/api/rest/home" target="_blank" rel="external">http://localhost:8002/api/rest/home</a></p>
<p>效果图如下：</p>
<p><img src="/uploads/springcloud-ribbon2.png" alt="image"></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78793639" target="_blank" rel="external">springcloud实战之高可用服务注册中心（eureka集群）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78790958" target="_blank" rel="external">springcloud实战之服务注册与发现（eureka实现）</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78789312" target="_blank" rel="external">springcloud实战之技术选型：dubbo还是springcloud</a></p>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="http://cloud.spring.io/spring-cloud-static/Edgware.RELEASE/multi/multi_spring-cloud-ribbon.html#netflix-ribbon-starter" target="_blank" rel="external">netflix-ribbon-starter</a></p>
<h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-server-eureka" target="_blank" rel="external">springcloud-server-eureka</a></p>
<p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-producer-rest" target="_blank" rel="external">springcloud-producer-rest</a></p>
<p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-consumer-ribbon" target="_blank" rel="external">springcloud-consumer-ribbon</a></p>
]]></content>
      
        <categories>
            
            <category> springcloud实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springcloud,ribbon </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springcloud实战之高可用服务注册中心（eureka集群）]]></title>
      <url>/2017/12/16/springcloud%E5%AE%9E%E6%88%98%E4%B9%8B%E9%AB%98%E5%8F%AF%E7%94%A8%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83%EF%BC%88eureka%E9%9B%86%E7%BE%A4%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>springcloud实现高可用服务注册中心的eureka集群<br><a id="more"></a><br><a href="http://blog.csdn.net/u012806787/article/details/78790958" target="_blank" rel="external">springcloud实战之服务注册与发现（eureka实现）</a>介绍了如果搭建单例的服务注册中心，但这在生产环境是经不住压力的。万一宕机或不可抗力导致服务宕掉就会导致严重后果，本篇介绍如何搭建服务注册中心集群，从而实现高可用。</p>
<h3 id="改造注册中心项目"><a href="#改造注册中心项目" class="headerlink" title="改造注册中心项目"></a>改造注册中心项目</h3><p>新建配置文件 application-peer1.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8080</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer1</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer2:8090/eureka/</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">springcloud-eureka-server</span></div></pre></td></tr></table></figure>
<p>新建配置文件 application-peer2.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8090</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer2</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8080/eureka/</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">springcloud-eureka-server</span></div></pre></td></tr></table></figure>
<p>修改application.yml</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  profiles:</div><div class="line">    active: peer1</div></pre></td></tr></table></figure>
<p>修改host文件</p>
<p>windows：C:\Windows\System32\drivers\etc</p>
<p>类unix：/etc/profiles</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">127.0.0.1 peer1</div><div class="line">127.0.0.1 peer2</div></pre></td></tr></table></figure>
<p>启动服务</p>
<p>默认idea不支持相同类启动多个服务，按照 <a href="http://blog.csdn.net/u012806787/article/details/78793062" target="_blank" rel="external">idea启动两个端口的相同springboot服务</a> 修改即可</p>
<p>第一次启动 application.yml中的配置文件为：peer1</p>
<p>第二次启动 application.yml中的配置文件为：peer2</p>
<p>启动完之后如下图</p>
<p><img src="/uploads/高可用服务注册中心1.png" alt=""></p>
<h2 id="改造服务提供者项目"><a href="#改造服务提供者项目" class="headerlink" title="改造服务提供者项目"></a>改造服务提供者项目</h2><p>修改配置文件 application.yml为</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8001</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">springcloud-service-rest</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer2:8090/eureka/</span></div></pre></td></tr></table></figure>
<p>主要对eureka.client.serviceUrl.defaultZone属性做了改动，将注册中心指向了之前我们搭建的peer2。</p>
<p>由于peer1与peer2已经互通，注册其中一个，另外一个也会注册上。</p>
<p>启动服务，情况如下图：</p>
<p><img src="/uploads/高可用服务注册中心2.png" alt=""></p>
<p><img src="/uploads/高可用服务注册中心3.png" alt=""></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>虽然上面我们以双节点作为例子，但是实际上因负载等原因，我们往往可能需要在生产环境构建多于两个的Eureka Server节点。那么对于如何配置serviceUrl来让集群中的服务进行同步，需要我们更深入的理解节点间的同步机制来做出决策。</p>
<p>两两注册的方式可以实现集群中节点完全对等的效果，实现最高可用性集群，任何一台注册中心故障都不会影响服务的注册与发现</p>
]]></content>
      
        <categories>
            
            <category> springcloud实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> eureka集群 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springcloud实战之技术选型：dubbo还是springcloud]]></title>
      <url>/2017/12/16/springcloud%E5%AE%9E%E6%88%98%E4%B9%8B%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8B%EF%BC%9Adubbo%E8%BF%98%E6%98%AFspringcloud/</url>
      <content type="html"><![CDATA[<p>微服务技术选型：dubbo还是springcloud</p>
<a id="more"></a>
<p>微服务自从出现之后好像全世界都在谈论微服务，16年我刚听说“微服务”，我没有太上心，无非是将业务拆分部署，然后用http调用。但17年我实践dubbo和cloud之后发现服务调用不是http协议，dubbo和cloud各自有各自的服务监控，服务注册等等功能，异常丰富。仿佛一个全新的世界，我刚踏进去一只脚，对我的冲击，震撼可以想象出来。</p>
<p>目前，应用springcloud 的公司还不普遍，求职面试对springcloud也没有硬性要求。然而不少阿里系出来的人才在各公司开始应用dubbo，这也导致在国内dubbo的普及更广。</p>
<p>那么，当我们实施微服务架构，到底是应该用dubbo还是springcloud呢？</p>
<p>以下内容纯属个人见解，本人知识面有限，不对之处，多多包涵。</p>
<h2 id="Part-1-背景"><a href="#Part-1-背景" class="headerlink" title="Part 1 背景"></a>Part 1 背景</h2><p>Dubbo，是阿里巴巴服务化治理的核心框架，并被广泛应用于阿里巴巴集团的各成员站点。阿里巴巴近几年对开源社区的贡献不论在国内还是国外都是引人注目的，RocketMq捐赠给apache并成为顶级项目，成为中国捐赠给apache（两百多个项目）的第四个开源项目，Druid连接池被誉为效率最高的数据库连接池框架等等，为国人挣足了面子。使阿里巴巴从一家电商公司上升为一家科技公司。</p>
<p>Springcloud拥有更强大的背景，spring社区更是Java企业界最有影响力的组织。</p>
<h2 id="Part-2-源码维护力度"><a href="#Part-2-源码维护力度" class="headerlink" title="Part 2 源码维护力度"></a>Part 2 源码维护力度</h2><p>Dubbo曾一度停止维护，2017年再度开始更新。</p>
<p>Springcloud更新力度大，处于高速迭代的阶段。</p>
<h2 id="Part-3-架构完整度"><a href="#Part-3-架构完整度" class="headerlink" title="Part 3 架构完整度"></a>Part 3 架构完整度</h2><p>根据微服务架构在各方面的要素，看看Spring Cloud和Dubbo都提供了哪些支持。</p>
<p><img src="/uploads/技术选型.png" alt="image"></p>
<h2 id="Part-4-文档质量"><a href="#Part-4-文档质量" class="headerlink" title="Part 4 文档质量"></a>Part 4 文档质量</h2><p>Dubbo的文档可以说在国内开源框架中算是一流的，非常全，并且讲解的也非常深入，由于版本已经稳定不再更新，所以也不太会出现不一致的情况，另外提供了中文与英文两种版本，对于国内开发者来说，阅读起来更加容易上手，这也是dubbo在国内更火一些的原因吧。</p>
<p>Spring Cloud由于整合了大量组件，文档在体量上自然要比dubbo多很多，文档内容上还算简洁清楚，但是更多的是偏向整合，更深入的使用方法还是需要查看其整合组件的详细文档。另外由于Spring Cloud基于Spring Boot，很多例子相较于传统Spring应用要简单很多（因为自动化配置，很多内容都成了约定的默认配置），这对于刚接触的开发者可能会有些不适应，比较建议了解和学习Spring Boot之后再使用Spring Cloud，不然可能会出现很多一知半解的情况。</p>
<p>小结：虽然Spring Cloud的文档量大，但是如果使用Dubbo去整合其他第三方组件，实际也是要去阅读大量第三方组件文档的，所以在文档量上，我觉得区别不大。对于文档质量，由于Spring Cloud的迭代很快，难免会出现不一致的情况，所以在质量上我认为Dubbo更好一些。而对于文档语言上，Dubbo自然对国内开发团队来说更有优势。</p>
<h2 id="Part-5-总结"><a href="#Part-5-总结" class="headerlink" title="Part 5 总结"></a>Part 5 总结</h2><p>不恰当的比喻：使用Dubbo构建的微服务架构就像组装电脑，各环节我们的选择自由度很高，但是最终结果很有可能因为一条内存质量不行就点不亮了，总是让人不怎么放心，但是如果你是一名高手，那这些都不是问题；而Spring Cloud就像品牌机，在Spring Source的整合下，做了大量的兼容性测试，保证了机器拥有更高的稳定性，但是如果要在使用非原装组件外的东西，就需要对其基础有足够的了解。</p>
<p>从目前Spring Cloud的被关注度和活跃度上来看，很有可能将来会成为微服务架构的标准框架。所以，Spring Cloud的系列文章，我会继续写下去。也欢迎各位朋友一起交流，共同进步。</p>
]]></content>
      
        <categories>
            
            <category> springcloud实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springcloud,dubbo </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[springcloud实战之服务注册与发现（eureka实现）]]></title>
      <url>/2017/12/16/springcloud%E5%AE%9E%E6%88%98%E4%B9%8B%E6%9C%8D%E5%8A%A1%E6%B3%A8%E5%86%8C%E4%B8%8E%E5%8F%91%E7%8E%B0%EF%BC%88eureka%E5%AE%9E%E7%8E%B0%EF%BC%89/</url>
      <content type="html"><![CDATA[<p>springcloud实现服务注册与发现<br><a id="more"></a></p>
<h2 id="服务注册与发现"><a href="#服务注册与发现" class="headerlink" title="服务注册与发现"></a>服务注册与发现</h2><p>Springcloud庞大的分布式系统：</p>
<ul>
<li>服务发现与注册（Eureka）</li>
<li>断路器（Hystrix）</li>
<li>智能路有，服务网关（Zuul）</li>
<li>客户端负载均衡（Ribbon）</li>
<li>分布式配置中心（config）</li>
<li>消息总线（Bus）</li>
<li>安全框架（Security）</li>
<li>调度中心（Zookeeper）</li>
</ul>
<p>本篇介绍如何使用spring-cloud-starter-eureka-server来搭建Spring Cloud服务注册与发现模块。</p>
<h3 id="创建服务注册中心（springcloud-eureka-server）"><a href="#创建服务注册中心（springcloud-eureka-server）" class="headerlink" title="创建服务注册中心（springcloud-eureka-server）"></a>创建服务注册中心（springcloud-eureka-server）</h3><p>创建一个提供服务的客户端，并向服务注册中心注册自己。</p>
<h4 id="创建springboot项目"><a href="#创建springboot项目" class="headerlink" title="创建springboot项目"></a>创建springboot项目</h4><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">    &lt;relativePath /&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka-server&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div><div class="line"></div><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Edgware.RELEASE&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div></pre></td></tr></table></figure>
<h4 id="创建入口类"><a href="#创建入口类" class="headerlink" title="创建入口类"></a>创建入口类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaServerApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        <span class="keyword">new</span> SpringApplicationBuilder(SpringCloudEurekaServerApplication.class).web(<span class="keyword">true</span>).run(args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>新建application.yml</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    registerWithEureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetchRegistry:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure>
<p>为了与后续要进行注册的服务区分，这里将服务注册中心的端口通过server.port属性设置为8000。</p>
<p>启动入口类，可以发现如下界面</p>
<p><img src="/uploads/springcloud-eureka1.png" alt="image"></p>
<p>目前没有注册任何应用</p>
<h3 id="创建服务提供方"><a href="#创建服务提供方" class="headerlink" title="创建服务提供方"></a>创建服务提供方</h3><h4 id="添加依赖-1"><a href="#添加依赖-1" class="headerlink" title="添加依赖"></a>添加依赖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</div><div class="line">    &lt;relativePath /&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;</div><div class="line"></div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-cloud-starter-eureka&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div><div class="line"></div><div class="line">&lt;dependencyManagement&gt;</div><div class="line">    &lt;dependencies&gt;</div><div class="line">        &lt;dependency&gt;</div><div class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</div><div class="line">            &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</div><div class="line">            &lt;version&gt;Edgware.RELEASE&lt;/version&gt;</div><div class="line">            &lt;type&gt;pom&lt;/type&gt;</div><div class="line">            &lt;scope&gt;import&lt;/scope&gt;</div><div class="line">        &lt;/dependency&gt;</div><div class="line">    &lt;/dependencies&gt;</div><div class="line">&lt;/dependencyManagement&gt;</div></pre></td></tr></table></figure>
<h4 id="创建入口类-1"><a href="#创建入口类-1" class="headerlink" title="创建入口类"></a>创建入口类</h4><p>使用EnableEurekaClient注解。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableDiscoveryClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudServiceRestApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringCloudServiceRestApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="创建配置文件-1"><a href="#创建配置文件-1" class="headerlink" title="创建配置文件"></a>创建配置文件</h4><p>新建application.yml</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: <span class="number">8001</span></div><div class="line">spring:</div><div class="line">  application:</div><div class="line">    name: springcloud-service-rest</div><div class="line">eureka:</div><div class="line">  client:</div><div class="line">    serviceUrl:</div><div class="line">      defaultZone: http:<span class="comment">//localhost:8000/eureka/</span></div></pre></td></tr></table></figure>
<h4 id="创建restful接口"><a href="#创建restful接口" class="headerlink" title="创建restful接口"></a>创建restful接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/api/rest"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> RestTemplate restTemplate ;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;server.port&#125;"</span>)</div><div class="line">    String port ;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.application.name&#125;"</span>)</div><div class="line">    String name ;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/info"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"I am info from port("</span>+port+<span class="string">") from application name("</span>+name+<span class="string">")"</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><p>启动入口类项目，发现如下截图</p>
<p><img src="/uploads/springcloud-eureka2.png" alt="image"></p>
<p>访问服务，截图如下</p>
<p><img src="/uploads/springcloud-eureka3.png" alt="image"></p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-eureka-server" target="_blank" rel="external">springcloud-eureka-server</a></p>
<p><a href="https://github.com/shiyuan2he/springcloud/tree/master/springcloud-service-rest" target="_blank" rel="external">springcloud-service-rest</a></p>
<p>源码可能在后面的文章中会复用，有部分修改，按照博客操作就行，不是很难的东西</p>
<h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://cloud.spring.io/spring-cloud-static/Edgware.RELEASE/multi/multi__service_discovery_eureka_clients.html#netflix-eureka-client-starter" target="_blank" rel="external">netflix-eureka-client-starter</a></p>
<p><a href="http://cloud.spring.io/spring-cloud-static/Edgware.RELEASE/multi/multi_spring-cloud-eureka-server.html#netflix-eureka-server-starter" target="_blank" rel="external">netflix-eureka-server-starter</a></p>
]]></content>
      
        <categories>
            
            <category> springcloud实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springcloud,eureka </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[idea使用笔记之1_idea启动两个端口的相同springboot服务]]></title>
      <url>/2017/12/16/idea%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0%E4%B9%8B1_idea%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%B8%AA%E7%AB%AF%E5%8F%A3%E7%9A%84%E7%9B%B8%E5%90%8Cspringboot%E6%9C%8D%E5%8A%A1/</url>
      <content type="html"><![CDATA[<p>idea开启两个springboot应用<br><a id="more"></a><br>spingboot做集群服务的时候，同一个入口类需要启动多次，idea默认每次启动都会覆盖之前的服务，修改一下即可使用</p>
<h3 id="1-打开启动类配置页"><a href="#1-打开启动类配置页" class="headerlink" title="1.打开启动类配置页"></a>1.打开启动类配置页</h3><p>点击图中圈中的地方</p>
<p><img src="/uploads/idea.png" alt="image"></p>
<h3 id="2-勾选掉单例"><a href="#2-勾选掉单例" class="headerlink" title="2.勾选掉单例"></a>2.勾选掉单例</h3><p><img src="/uploads/idea2.png" alt="image"></p>
<h3 id="3-应用apply"><a href="#3-应用apply" class="headerlink" title="3.应用apply"></a>3.应用apply</h3>]]></content>
      
        <categories>
            
            <category> idea使用笔记 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> idea </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之11 整合mybatis]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B11%20%E6%95%B4%E5%90%88mybatis/</url>
      <content type="html"><![CDATA[<p>本篇介绍springboot整合mybatis<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>引用百度百科：</p>
<ul>
<li>简单易学：本身就很小且简单。没有任何第三方依赖，最简单安装只要两个jar文件+配置几个sql映射文件易于学习，易于使用，通过文档和源代码，可以比较完全的掌握它的设计思路和实现。</li>
<li>灵活：mybatis不会对应用程序或者数据库的现有设计强加任何影响。 sql写在xml里，便于统一管理和优化。通过sql基本上可以实现我们不使用数据访问框架可以实现的所有功能，或许更多。</li>
<li>解除sql与程序代码的耦合：通过提供DAL层，将业务逻辑和数据访问逻辑分离，使系统的设计更清晰，更易维护，更易单元测试。sql和代码的分离，提高了可维护性。</li>
<li>提供映射标签，支持对象与数据库的orm字段关系映射<br>提供对象关系映射标签，支持对象关系组建维护<br>提供xml标签，支持编写动态sql。</li>
</ul>
<h2 id="code实现"><a href="#code实现" class="headerlink" title="code实现"></a>code实现</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mariadb.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariadb-java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hsy.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-bean<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="dao层实现"><a href="#dao层实现" class="headerlink" title="dao层实现"></a>dao层实现</h3><p>TExerciseZoneMapper.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TExerciseZoneMapper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function">List&lt;TExerciseZone&gt; <span class="title">selectAll</span><span class="params">(@Param(value = <span class="string">"offset"</span>)</span> Integer offset, @<span class="title">Param</span><span class="params">(value = <span class="string">"limit"</span>)</span> Integer limit) </span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(@Param(value = <span class="string">"parentId"</span>)</span> Integer parentId,@<span class="title">Param</span><span class="params">(value = <span class="string">"id"</span>)</span> Long id) </span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>mapper文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.hsy.springboot.mybatis.mapper.TExerciseZoneMapper"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAll"</span> <span class="attr">resultType</span>=<span class="string">"TExerciseZone"</span>&gt;</span></div><div class="line">        select * from t_exercise_zone_test where 1 = 1 limit #&#123;offset&#125; , #&#123;limit&#125;;</div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getProvinceById"</span> <span class="attr">resultType</span>=<span class="string">"TExerciseZone"</span>&gt;</span></div><div class="line">        select * from t_exercise_zone_test WHERE 1 = 1</div><div class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"id!=null || ''!=id"</span>&gt;</span></div><div class="line">            AND id = #&#123;id&#125;</div><div class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span>&gt;</span></div><div class="line">        update t_exercise_zone_test set parent_id = #&#123;parentId&#125; WHERE id = #&#123;id&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">update</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="service层实现"><a href="#service层实现" class="headerlink" title="service层实现"></a>service层实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(value = <span class="string">"exerciseZoneService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TExerciseZoneServiceImpl</span> <span class="keyword">implements</span> <span class="title">ITExerciseZoneService</span></span>&#123;</div><div class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"SpringJavaAutowiringInspection"</span>)</div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> TExerciseZoneMapper tExerciseZoneMapper ;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;TExerciseZone&gt; <span class="title">getAll</span><span class="params">(Integer offset,Integer limit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> tExerciseZoneMapper.selectAll(offset,limit);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Transactional</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">update</span><span class="params">(Integer parentId,Long id)</span> </span>&#123;</div><div class="line">        tExerciseZoneMapper.update(<span class="number">100000</span>,<span class="number">1l</span>) ;</div><div class="line">        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span> ;</div><div class="line">        tExerciseZoneMapper.update(<span class="number">110000</span>,<span class="number">2l</span>) ;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="web层实现"><a href="#web层实现" class="headerlink" title="web层实现"></a>web层实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/rest"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> ITExerciseZoneService exerciseZoneService ;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/update/&#123;id&#125;"</span>,method = RequestMethod.PUT,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyBean&lt;Boolean&gt; <span class="title">update</span><span class="params">(@PathVariable Long id,@RequestParam Integer parentId)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.update(parentId,id)) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@GetMapping</span>(value = &#123;<span class="string">"/v1/zones/&#123;offset&#125;/&#123;limit&#125;"</span>&#125;)</div><div class="line">    <span class="keyword">public</span> ResponseBodyBean&lt;List&lt;TExerciseZone&gt;&gt; zoneList(<span class="meta">@PathVariable</span> Integer offset, <span class="meta">@PathVariable</span> Integer limit)&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.getAll(offset,limit)) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">server.port=<span class="number">9527</span></div><div class="line"></div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=org.mariadb.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mariadb:<span class="comment">//192.168.175.128:3306/exercise?useUnicode=true&amp;characterEncoding=UTF-8</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root<span class="meta">@mariadb</span></div><div class="line"></div><div class="line">mybatis.mapper-locations=classpath*:mybatis<span class="comment">/*Mapper.xml</span></div><div class="line">mybatis.type-aliases-package=com.hsy.java.bean.po</div></pre></td></tr></table></figure>
<h3 id="项目入口"><a href="#项目入口" class="headerlink" title="项目入口"></a>项目入口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@MapperScan</span>(<span class="string">"com.hsy.springboot.mybatis.mapper"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootMybatisApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SpringApplication.run(SpringBootMybatisApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a>项目结构图</h2><p><img src="/uploads/springboot-mybatis.png" alt=""></p>
<h2 id="接口测试图"><a href="#接口测试图" class="headerlink" title="接口测试图"></a>接口测试图</h2><p><img src="/uploads/springboot-mybatis2.png" alt=""></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>springboot-<a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-mybatis" target="_blank" rel="external">mybatis</a></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78706156" target="_blank" rel="external">springboot实战之整合freemarker模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78710113" target="_blank" rel="external">springboot实战之注册自定义Servlet</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78715725" target="_blank" rel="external">springboot实战之注册filter和listener</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78719429" target="_blank" rel="external">springboot实战之注册interceptor</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78725259" target="_blank" rel="external">springboot实战之整合slf4j日志系统</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78722025" target="_blank" rel="external">springboot实战之整合CommandLineRunner</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78725676" target="_blank" rel="external">springboot实战之整合restful工具swagger2</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78735411" target="_blank" rel="external">springboot实战之整合jdbc进行crud操作</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,mybatis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之10 整合jdbc进行crud操作]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B10%20%E6%95%B4%E5%90%88jdbc%E8%BF%9B%E8%A1%8Ccrud%E6%93%8D%E4%BD%9C/</url>
      <content type="html"><![CDATA[<p>springboot项目整合jdbc，实现crud操作<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>springboot整合数据源之jdbc，web项目操作数据库是常有之事。本篇介绍springboot如何用jdbc连接mariadb数据库。</p>
<h2 id="code实现"><a href="#code实现" class="headerlink" title="code实现"></a>code实现</h2><h3 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mariadb.jdbc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mariadb-java-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hsy.springboot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-rpc-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hsy.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-exception<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.hsy.java<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-util<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="新建数据模型实体类"><a href="#新建数据模型实体类" class="headerlink" title="新建数据模型实体类"></a>新建数据模型实体类</h3><p>Exercise.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TExerciseZone</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    <span class="keyword">private</span> Integer code;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> Long parentId;</div><div class="line">    <span class="keyword">private</span> Integer sortId;</div><div class="line">    <span class="keyword">private</span> String remark;</div><div class="line"></div><div class="line">    <span class="comment">//省略setter，getter等方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="dao层简要实现"><a href="#dao层简要实现" class="headerlink" title="dao层简要实现"></a>dao层简要实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Repository</span>(<span class="string">"exerciseDao"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TExerciseZoneDaoImpl</span> <span class="keyword">implements</span> <span class="title">ITExerciseZoneDao</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(TExerciseZoneDaoImpl.class) ;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insert</span><span class="params">(TExerciseZone exerciseZone)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">return</span> jdbcTemplate.update(insertSql,</div><div class="line">                    exerciseZone.getCode(),exerciseZone.getName(),exerciseZone.getParentId(), exerciseZone.getSortId(),exerciseZone.getRemark());</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            _logger.error(<span class="string">"出错信息:&#123;&#125;"</span>,e);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DBHandleException(DBEnum.DB_INSERT_RESULT_ERROR,e) ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchInsert(List&lt;Object[]&gt; batchArgs) &#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">return</span> jdbcTemplate.batchUpdate(insertSql,batchArgs);</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DBHandleException(DBEnum.DB_INSERT_RESULT_ERROR,e) ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">return</span> jdbcTemplate.update(deleteSql,id);</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DBHandleException(DBEnum.DB_DELETE_RESULT_ERROR,e) ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchDelete(List&lt;Long[]&gt; ids) &#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            List&lt;Object[]&gt; oids = <span class="keyword">null</span> ;</div><div class="line">            ids.forEach(id -&gt; &#123;</div><div class="line">                Object[] oid = <span class="keyword">null</span> ;</div><div class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;id.length;i++)&#123;</div><div class="line">                    oid[i] = id[i] ;</div><div class="line">                &#125;</div><div class="line">                oids.add(oid) ;</div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">return</span> jdbcTemplate.batchUpdate(deleteSql,oids) ;</div><div class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(TExerciseZone exerciseZone)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span>&#123;</div><div class="line">            <span class="keyword">return</span> jdbcTemplate.update(updateSql,exerciseZone.getCode(),exerciseZone.getName(),exerciseZone.getParentId(),</div><div class="line">                    exerciseZone.getSortId(),exerciseZone.getRemark(),exerciseZone.getId());</div><div class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DBHandleException(DBEnum.DB_UPDATE_RESULT_ERROR,e) ;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(List&lt;Object[]&gt; batchArgs) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">return</span> jdbcTemplate.batchUpdate(updateSql,batchArgs);</div><div class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</div><div class="line">            _logger.error(<span class="string">"反生异常：&#123;&#125;"</span>,e);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DBHandleException(DBEnum.DB_UPDATE_RESULT_ERROR,e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TExerciseZone <span class="title">select</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        TExerciseZone queryExerciseZone = jdbcTemplate.queryForObject(selectSql,<span class="keyword">new</span> Object[]&#123;id&#125;,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(TExerciseZone.class)) ;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=queryExerciseZone)&#123;</div><div class="line">            <span class="keyword">return</span> queryExerciseZone;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TExerciseZone() ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;TExerciseZone&gt; <span class="title">selectAll</span><span class="params">(Integer offset, Integer limit)</span> </span>&#123;</div><div class="line">        List&lt;TExerciseZone&gt; list = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=offset&amp;&amp;<span class="keyword">null</span>!=limit)&#123;</div><div class="line">                list = jdbcTemplate.query(selectAllSql + <span class="string">"limit ?,?"</span>,<span class="keyword">new</span> Object[]&#123;offset,limit&#125;,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(TExerciseZone.class));</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                list = jdbcTemplate.query(selectAllSql,<span class="keyword">new</span> Object[]&#123;&#125;,<span class="keyword">new</span> BeanPropertyRowMapper&lt;&gt;(TExerciseZone.class));</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (DataAccessException e) &#123;</div><div class="line">            _logger.error(<span class="string">"捕获异常："</span>,e);</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> DBHandleException(DBEnum.DB_SELECT_IS_NULL,e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(<span class="keyword">null</span>!=list&amp;&amp;list.size()&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> list ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="service层简要实现"><a href="#service层简要实现" class="headerlink" title="service层简要实现"></a>service层简要实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span>(value=<span class="string">"exerciseZoneService"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TExerciseZoneServiceImpl</span> <span class="keyword">implements</span> <span class="title">ITExerciseZoneService</span></span>&#123;</div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> ITExerciseZoneDao exerciseDao ;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">createTExerciseZone</span><span class="params">(Integer code, String name, Long parentId, Integer sortId, String remark)</span> </span>&#123;</div><div class="line">        TExerciseZone exerciseZone = <span class="keyword">new</span> TExerciseZone() ;</div><div class="line">        exerciseZone.setCode(code);</div><div class="line">        exerciseZone.setName(name);</div><div class="line">        exerciseZone.setParentId(parentId);</div><div class="line">        exerciseZone.setSortId(sortId);</div><div class="line">        exerciseZone.setRemark(remark);</div><div class="line">        <span class="keyword">int</span> insertCount = exerciseDao.insert(exerciseZone) ;</div><div class="line">        <span class="keyword">if</span>(insertCount&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">bachtCreateTExcrciseZone</span><span class="params">(List&lt;TExerciseZone&gt; list)</span> </span>&#123;</div><div class="line">        List&lt;Object[]&gt; objArgs = <span class="keyword">new</span> ArrayList&lt;&gt;() ;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;list.size();i++)&#123;</div><div class="line">            Object[] objs = <span class="keyword">new</span> Object[]&#123;&#125; ;</div><div class="line">            objs[<span class="number">0</span>] = list.get(i).getCode();</div><div class="line">            objs[<span class="number">1</span>] = list.get(i).getName();</div><div class="line">            objs[<span class="number">2</span>] = list.get(i).getParentId() ;</div><div class="line">            objs[<span class="number">3</span>] = list.get(i).getRemark() ;</div><div class="line">            objs[<span class="number">4</span>] = list.get(i).getSortId() ;</div><div class="line">            objArgs.add(objs) ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(exerciseDao.batchInsert(objArgs).length&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteTExerciseZone</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span>(exerciseDao.delete(id)&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">batchDeleteTExerciseZone</span><span class="params">(List&lt;Long&gt; ids)</span> </span>&#123;</div><div class="line">        List&lt;Long[]&gt; objArgs = <span class="keyword">new</span> ArrayList&lt;&gt;() ;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ids.size(); i++) &#123;</div><div class="line">            Long[] objs = <span class="keyword">new</span> Long[]&#123;&#125; ;</div><div class="line">            objs[<span class="number">0</span>] = ids.get(i);</div><div class="line">            objArgs.add(objs);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(exerciseDao.batchDelete(objArgs).length&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateTExerciseZone</span><span class="params">(TExerciseZone exerciseZone)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (exerciseDao.update(exerciseZone)&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">batchUpdateTEerciseZone</span><span class="params">(List&lt;TExerciseZone&gt; list)</span> </span>&#123;</div><div class="line">        List&lt;Object[]&gt; objArgs = <span class="keyword">new</span> ArrayList&lt;&gt;() ;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</div><div class="line">            Object[] objs = <span class="keyword">new</span> Object[]&#123;&#125; ;</div><div class="line">            objs[<span class="number">0</span>] = list.get(i).getCode();</div><div class="line">            objs[<span class="number">1</span>] = list.get(i).getName();</div><div class="line">            objs[<span class="number">2</span>] = list.get(i).getParentId() ;</div><div class="line">            objs[<span class="number">3</span>] = list.get(i).getRemark() ;</div><div class="line">            objs[<span class="number">4</span>] = list.get(i).getSortId() ;</div><div class="line">            objs[<span class="number">5</span>] = list.get(i).getId() ;</div><div class="line">            objArgs.add(objs) ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>(exerciseDao.batchUpdate(objArgs).length&gt;<span class="number">0</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> TExerciseZone <span class="title">getOne</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> exerciseDao.select(id) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;TExerciseZone&gt; <span class="title">getList</span><span class="params">(Integer offset, Integer limit)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> exerciseDao.selectAll(offset,limit);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="controller层简要实现"><a href="#controller层简要实现" class="headerlink" title="controller层简要实现"></a>controller层简要实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Api</span>(value = <span class="string">"省市区接口服务"</span>,description = <span class="string">"省市区crud操作"</span>)</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/rest"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span> <span class="keyword">private</span> ITExerciseZoneService exerciseZoneService ;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"用户注册接口"</span>,tags = <span class="string">"对外提供用户注册接口"</span>)</div><div class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/v1/reg"</span>,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyBean&lt;Boolean&gt; <span class="title">reg</span><span class="params">(@RequestParam(value = <span class="string">"code"</span>)</span> Integer code, @RequestParam String name,</span></div><div class="line">                                      @RequestParam Long parentId, @<span class="title">RequestParam</span><span class="params">(required = <span class="keyword">false</span>)</span> Integer sortId, String remark)&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.createTExerciseZone(code, name, parentId, sortId, remark));</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"批量注册"</span>,tags = <span class="string">"对外提供批量注册接口"</span>)</div><div class="line">    <span class="meta">@PostMapping</span>(value = <span class="string">"/v1/reg/batch"</span>,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyBean&lt;Boolean&gt; <span class="title">batchReg</span><span class="params">(@RequestParam String json)</span></span>&#123;</div><div class="line"></div><div class="line">        JsonToBeanUtil.responseJsonToBeanEnhance(json, TExerciseZone.class) ;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"指定id删除书籍"</span>,tags = <span class="string">"对外提供根据id单个删除书籍"</span>)</div><div class="line">    <span class="comment">//paramType 说明在路径当中</span></div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>,value = <span class="string">"book主键ID"</span>,required = <span class="keyword">true</span>,dataType = <span class="string">"Long"</span>,paramType = <span class="string">"path"</span>)</div><div class="line">    <span class="meta">@DeleteMapping</span>(value = <span class="string">"/v1/delete/&#123;id&#125;"</span>,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyBean&lt;Boolean&gt; <span class="title">delete</span><span class="params">(@PathVariable Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.deleteTExerciseZone(id)) ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"批量删除"</span>,tags = <span class="string">"批量删除服务"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"ids"</span>,value = <span class="string">"主键IDlist集合"</span>,required = <span class="keyword">true</span>,dataType = <span class="string">"List&lt;Long&gt;"</span>,example = <span class="string">"&#123;1,2,3,4&#125;"</span>)</div><div class="line">    <span class="meta">@DeleteMapping</span>(value = <span class="string">"/v1/delete/batch"</span>,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyBean&lt;Boolean&gt; <span class="title">batchDelete</span><span class="params">(List&lt;Long&gt; ids)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.batchDeleteTExerciseZone(ids));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"指定id更新书籍"</span>,tags = <span class="string">"对外提供根据id单个更新书籍"</span>)</div><div class="line">    <span class="comment">//paramType 说明在路径当中</span></div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>,value = <span class="string">"book主键ID"</span>,required = <span class="keyword">true</span>,dataType = <span class="string">"Long"</span>,paramType = <span class="string">"path"</span>)</div><div class="line">    <span class="meta">@PutMapping</span>(value = <span class="string">"/v1/update/&#123;id&#125;"</span>,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyBean&lt;Boolean&gt; <span class="title">update</span><span class="params">(TExerciseZone exerciseZone)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.updateTExerciseZone(exerciseZone));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"批量更新"</span>,tags = <span class="string">"批量更新服务"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"list"</span>,value = <span class="string">"实体TExerciseZone list集合"</span>,required = <span class="keyword">true</span>,dataType = <span class="string">"List&lt;TExerciseZone&gt;"</span>)</div><div class="line">    <span class="meta">@PutMapping</span>(value = <span class="string">"/v1/update/batch"</span>,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyBean&lt;Boolean&gt; <span class="title">batchUpdate</span><span class="params">(List&lt;TExerciseZone&gt; list)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.batchUpdateTEerciseZone(list));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"单个查询"</span>,tags = <span class="string">"查询单个书籍"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>,value = <span class="string">"book主键ID"</span>,required = <span class="keyword">true</span>,dataType = <span class="string">"Long"</span>,paramType = <span class="string">"path"</span>)</div><div class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/v1/zone/&#123;id&#125;"</span>,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> ResponseBodyBean&lt;TExerciseZone&gt; <span class="title">getZone</span><span class="params">(@PathVariable Long id)</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.getOne(id)) ;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value = <span class="string">"批量查询"</span>,tags = <span class="string">"批量查询服务"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</div><div class="line">        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"offset"</span>,value = <span class="string">"从第几个开始查询"</span>,dataType = <span class="string">"Integer"</span>),</div><div class="line">        <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"limit"</span>,value = <span class="string">"每页显示几个"</span>,dataType = <span class="string">"Integer"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="meta">@GetMapping</span>(value = &#123;<span class="string">"/v1/zones"</span>,<span class="string">"/v1/zones/&#123;offset&#125;/&#123;limit&#125;"</span>&#125;)</div><div class="line">    <span class="keyword">public</span> ResponseBodyBean&lt;List&lt;TExerciseZone&gt;&gt; getZones(<span class="meta">@PathVariable</span>(required = <span class="keyword">false</span>) Integer offset,<span class="meta">@PathVariable</span>(required = <span class="keyword">false</span>) Integer limit)&#123;</div><div class="line">        <span class="keyword">return</span> success(exerciseZoneService.getList(offset,limit));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>aplication.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring.datasource.driver-class-name=org.mariadb.jdbc.Driver</div><div class="line">spring.datasource.url=jdbc:mariadb://192.168.216.129:3306/exercise?useUnicode=true&amp;characterEncoding=UTF-8</div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root@mariadb</div></pre></td></tr></table></figure></p>
<h3 id="程序入口"><a href="#程序入口" class="headerlink" title="程序入口"></a>程序入口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@ComponentScan</span>(basePackages = <span class="string">"com.hsy.springboot.jdbc"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootJdbcApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SpringApplication.run(SpringBootJdbcApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="swagger接口文档"><a href="#swagger接口文档" class="headerlink" title="swagger接口文档"></a>swagger接口文档</h2><p>用了swagger生成在线接口文档，不懂swagger的可以看我历史文章</p>
<p>效果图如下</p>
<p><img src="/uploads/springboot-jdbc.png" alt=""></p>
<h2 id="用postman测试接口"><a href="#用postman测试接口" class="headerlink" title="用postman测试接口"></a>用postman测试接口</h2><p>测试增删改差等接口如下图</p>
<p><img src="/uploads/springboot-jdbc2.png" alt=""></p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p>由于不便详尽展现整个项目，再次附上源代码</p>
<p><a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-jdbc" target="_blank" rel="external">springboot-jdbc</a></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78706156" target="_blank" rel="external">springboot实战之整合freemarker模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78710113" target="_blank" rel="external">springboot实战之注册自定义Servlet</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78715725" target="_blank" rel="external">springboot实战之注册filter和listener</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78719429" target="_blank" rel="external">springboot实战之注册interceptor</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78725259" target="_blank" rel="external">springboot实战之整合slf4j日志系统</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78722025" target="_blank" rel="external">springboot实战之整合CommandLineRunner</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78725676" target="_blank" rel="external">springboot实战之整合restful工具swagger2</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,jdbc,crud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之12 整合restful工具swagger2]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B12%20%E6%95%B4%E5%90%88restful%E5%B7%A5%E5%85%B7swagger2/</url>
      <content type="html"><![CDATA[<p>本篇介绍springboot项目中添加在线接口文档<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p> Swagger 是一款RESTFUL接口的文档在线自动生成+功能测试功能软件。本文简单介绍了在项目中集成swagger的方法和一些常见问题。如果想深入分析项目源码，了解更多内容，见参考资料。</p>
<p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法，参数和模型紧密集成到服务器端的代码，允许API来始终保持同步。Swagger 让部署管理和使用功能强大的API从未如此简单。</p>
<h2 id="code实现"><a href="#code实现" class="headerlink" title="code实现"></a>code实现</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="启用swagger2"><a href="#启用swagger2" class="headerlink" title="启用swagger2"></a>启用swagger2</h3><p>新建SwaggerConfig.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span> <span class="comment">//说明此类是一个配置类</span></div><div class="line"><span class="meta">@EnableSwagger</span>2 <span class="comment">//启用swagger2</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>&#123;</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">createRestApi</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</div><div class="line">                .apiInfo(apiInfo())</div><div class="line">                .select()</div><div class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">"com.hsy.springboot.swagger.web"</span>))</div><div class="line">                .paths(PathSelectors.any())</div><div class="line">                .build()</div><div class="line">                ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">apiInfo</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</div><div class="line">                .title(<span class="string">"spirngboot利用swagger构建api文档"</span>)</div><div class="line">                .description(<span class="string">"简单优雅的restfun风格，https://github.com/shiyuan2he/springboot"</span>)</div><div class="line">                .termsOfServiceUrl(<span class="string">"https://github.com/shiyuan2he/springboot"</span>)</div><div class="line">                .version(<span class="string">"1.0"</span>)</div><div class="line">                .build();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建实体Bean作为查询实体"><a href="#新建实体Bean作为查询实体" class="headerlink" title="新建实体Bean作为查询实体"></a>新建实体Bean作为查询实体</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">double</span> price;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.id = id;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">double</span> price)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.price = price;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建BookController"><a href="#新建BookController" class="headerlink" title="新建BookController"></a>新建BookController</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> *</div><div class="line">     Api：修饰整个类，描述Controller的作用</div><div class="line">     ApiOperation：描述一个类的一个方法，或者说一个接口</div><div class="line">     ApiParam：单个参数描述</div><div class="line">     ApiModel：用对象来接收参数</div><div class="line">     ApiProperty：用对象接收参数时，描述对象的一个字段</div><div class="line">     ApiResponse：HTTP响应其中1个描述</div><div class="line">     ApiResponses：HTTP响应整体描述</div><div class="line">     ApiIgnore：使用该注解忽略这个API</div><div class="line">     ApiError ：发生错误返回的信息</div><div class="line">     ApiParamImplicitL：一个请求参数</div><div class="line">     ApiParamsImplicit 多个请求参数</div><div class="line"></div><div class="line"> */</div><div class="line"><span class="meta">@Api</span>(value = <span class="string">"书籍接口"</span>,description = <span class="string">"书籍相关的处理"</span>)</div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/books"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookController</span> </span>&#123;</div><div class="line"></div><div class="line">    Map&lt;Long, Book&gt; books = Collections.synchronizedMap(<span class="keyword">new</span> HashMap&lt;Long, Book&gt;());</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获取图书列表"</span>, notes=<span class="string">"获取图书列表"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=&#123;<span class="string">""</span>&#125;, method= RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Book&gt; <span class="title">getBook</span><span class="params">()</span> </span>&#123;</div><div class="line">        List&lt;Book&gt; book = <span class="keyword">new</span> ArrayList&lt;&gt;(books.values());</div><div class="line">        <span class="keyword">return</span> book;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"创建图书"</span>, notes=<span class="string">"创建图书"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"book"</span>, value = <span class="string">"图书详细实体"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Book"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">""</span>, method=RequestMethod.POST)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">postBook</span><span class="params">(@RequestBody Book book)</span> </span>&#123;</div><div class="line">        books.put(book.getId(), book);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"获图书细信息"</span>, notes=<span class="string">"根据url的id来获取详细信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>,paramType = <span class="string">"path"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> Book <span class="title">getBook</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> books.get(id);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"更新信息"</span>, notes=<span class="string">"根据url的id来指定更新图书信息"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParams</span>(&#123;</div><div class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"图书ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>,paramType = <span class="string">"path"</span>),</div><div class="line">            <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"book"</span>, value = <span class="string">"图书实体book"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Book"</span>)</div><div class="line">    &#125;)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method= RequestMethod.PUT)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">putUser</span><span class="params">(@PathVariable Long id, @RequestBody Book book)</span> </span>&#123;</div><div class="line">        Book book1 = books.get(id);</div><div class="line">        book1.setName(book.getName());</div><div class="line">        book1.setPrice(book.getPrice());</div><div class="line">        books.put(id, book1);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@ApiOperation</span>(value=<span class="string">"删除图书"</span>, notes=<span class="string">"根据url的id来指定删除图书"</span>)</div><div class="line">    <span class="meta">@ApiImplicitParam</span>(name = <span class="string">"id"</span>, value = <span class="string">"图书ID"</span>, required = <span class="keyword">true</span>, dataType = <span class="string">"Long"</span>,paramType = <span class="string">"path"</span>)</div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;id&#125;"</span>, method=RequestMethod.DELETE)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">deleteUser</span><span class="params">(@PathVariable Long id)</span> </span>&#123;</div><div class="line">        books.remove(id);</div><div class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ApiIgnore</span><span class="comment">//使用该注解忽略这个API</span></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>, method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String  <span class="title">jsonTest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"world!"</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="新建项目入口SpringBootSwaggerApplication-java"><a href="#新建项目入口SpringBootSwaggerApplication-java" class="headerlink" title="新建项目入口SpringBootSwaggerApplication.java"></a>新建项目入口SpringBootSwaggerApplication.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootSwaggerApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootSwaggerApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a>项目结构图</h3><p><img src="/uploads/springboot-swagger.png" alt=""></p>
<h3 id="运行效果图"><a href="#运行效果图" class="headerlink" title="运行效果图"></a>运行效果图</h3><p><img src="/uploads/springboot-swagger2.png" alt=""></p>
<p>历史文章</p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78706156" target="_blank" rel="external">springboot实战之整合freemarker模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78710113" target="_blank" rel="external">springboot实战之注册自定义Servlet</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78715725" target="_blank" rel="external">springboot实战之注册filter和listener</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78719429" target="_blank" rel="external">springboot实战之注册interceptor</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78725259" target="_blank" rel="external">springboot实战之整合slf4j日志系统</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78722025" target="_blank" rel="external">springboot实战之整合CommandLineRunner</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,restful,swagger2 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之3 整合slf4j+logback日志框架]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B3%20%E6%95%B4%E5%90%88slf4j+logback%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6/</url>
      <content type="html"><![CDATA[<p>本篇介绍在项目中使用slf4j日志<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>日志系统几乎是每个项目必备的重要组成部分。但logback和log4j二者推荐使用logback，因为logback的效率显著高于log4j，而且logback也是springboot推荐及默认使用的日志系统。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>在Spring Boot 中记录日志只需两步：<br>1、在 src/main/resources 下面创建logback.xml 文件，并按上面讲述的进行配置。<br>或者使用最简单的方法在 application 配置文件中配置。<br>2、在Java代码中创建实例，并在需要输出日志的地方使用。</p>
<h2 id="code实现"><a href="#code实现" class="headerlink" title="code实现"></a>code实现</h2><p>在src/main/resources新建logback.xml</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--控制台日志--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[springboot-slf4j] %d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; -%5p $&#123;PID:-&#125; [%15.15t] %-40.40logger&#123;39&#125; : %m%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">%d&#123;HH:mm:ss.SSS&#125;——日志输出时间</div><div class="line">%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</div><div class="line">%-5level——日志级别，并且使用5个字符靠左对齐</div><div class="line">%m——日志消息</div><div class="line">%n——平台的换行符</div></pre></td></tr></table></figure>
<p>自定义日志</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"debug"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>代码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootSlf4jApplication</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger _logger = LoggerFactory.getLogger(SpringBootSlf4jApplication.class);</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        _logger.info(<span class="string">"this is springboot main"</span>);</div><div class="line">        SpringApplication.run(SpringBootSlf4jApplication.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>以上运行的效果</p>
<p><img src="/uploads/springboot-slf4j.png" alt=""></p>
<h2 id="文件日志"><a href="#文件日志" class="headerlink" title="文件日志"></a>文件日志</h2><p>系统日志全部写在一个文件会导致文件越来越大，这时候可以用文件日志来切分控制台日志</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"dailyRollingFileAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">File</span>&gt;</span>/usr/local/log/app.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- daily rollover --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- keep 30 days' worth of history --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>%d&#123;HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;35&#125; - %msg %n<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div></pre></td></tr></table></figure>
<p>logback.%d{yyyy-MM-dd}.log定义了日志的切分方式——把每一天的日志归档到一个文件中，30表示只保留最近30天的日志，以防止日志填满整个磁盘空间。同理，可以使用%d{yyyy-MM-dd  HH:mm:ss SSS}来定义精确到分的日志切分方式。</p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78706156" target="_blank" rel="external">springboot实战之整合freemarker模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78710113" target="_blank" rel="external">springboot实战之注册自定义Servlet</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78715725" target="_blank" rel="external">springboot实战之注册filter和listener</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78719429" target="_blank" rel="external">springboot实战之注册interceptor</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78725259" target="_blank" rel="external">springboot实战之整合slf4j日志系统</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78722025" target="_blank" rel="external">springboot实战之整合CommandLineRunner</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,slf4j,logback </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之4 整合CommandLineRunner]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B4%20%E6%95%B4%E5%90%88CommandLineRunner/</url>
      <content type="html"><![CDATA[<p>在本篇介绍springboot项目启动调用方法<br><a id="more"></a></p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>某些情况下需要再服务启动时执行部分代码，有很多实现方式，这里讲解实现CommandLineRunner接口实现。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>自定义类实现CommandLineRunner并且重写run方法。</p>
<h2 id="code实现"><a href="#code实现" class="headerlink" title="code实现"></a>code实现</h2><p>自定义方法Runner.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        _logger.info(<span class="string">"服务启动时执行此方法"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义方法Runner1.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(value = <span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner1</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">       _logger.info(<span class="string">"服务启动时执行此方法:Runner1"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义方法Runner2.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@Order</span>(value = <span class="number">2</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runner2</span> <span class="keyword">implements</span> <span class="title">CommandLineRunner</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String... strings)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        _logger.info(<span class="string">"服务启动时执行此方法:Runner2"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>入口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootRunnerApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootRunnerApplication.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h2><p><img src="/uploads/springboot-runner.png" alt=""></p>
<h2 id="项目结构图"><a href="#项目结构图" class="headerlink" title="项目结构图"></a>项目结构图</h2><p><img src="/uploads/springboot-runner2.png" alt=""></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>当有多个自定义方法实现CommandLineRunner方法时，设置顺序Order，数字越小执行优先级越高，默认Order：2147483647</p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78706156" target="_blank" rel="external">springboot实战之整合freemarker模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78710113" target="_blank" rel="external">springboot实战之注册自定义Servlet</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78715725" target="_blank" rel="external">springboot实战之注册filter和listener</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78719429" target="_blank" rel="external">springboot实战之注册interceptor</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78722025" target="_blank" rel="external">springboot实战之整合CommandLineRunner</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot, CommandLineRunner </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之5 注册interceptor]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B5%20%E6%B3%A8%E5%86%8Cinterceptor/</url>
      <content type="html"><![CDATA[<p>本篇介绍在springboot项目中注册interceptor<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>HandleInterceptor的功能跟Filter类似，但是范围要小一些，只拦截webmvc的接口请求，不拦截静态资源。即request请求之前有拦截方法，request请求之后有拦截方法。</p>
<h2 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h2><p>实现自定义拦截器需要3步：</p>
<p>1、创建我们自己的拦截器类并实现 HandlerInterceptor 接口。</p>
<p>2、创建一个Java类继承WebMvcConfigurerAdapter，并重写 addInterceptors 方法。</p>
<p>3、实例化我们自定义的拦截器，然后将对像手动添加到拦截器链中（在addInterceptors方法中添加）</p>
<h2 id="code实现"><a href="#code实现" class="headerlink" title="code实现"></a>code实现</h2><p>MyInterceptor1.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor1</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass()) ;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        _logger.info(<span class="string">"this is MyInterceptor1 preHandle"</span>);</div><div class="line">        <span class="comment">// 只有返回true才会继续向下执行，返回false取消当前请求</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        _logger.info(<span class="string">"this is MyInterceptor1 postHandle"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        _logger.info(<span class="string">"this is MyInterceptor1 afterCompletion"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MyInterceptor2.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor2</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span></span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass()) ;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        _logger.info(<span class="string">"this is MyInterceptor2 preHandle"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        _logger.info(<span class="string">"this is MyInterceptor2 postHandle"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        _logger.info(<span class="string">"this is MyInterceptor2 afterCompletion"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册Interceptor拦截器链</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptorConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor1()).addPathPatterns(<span class="string">"/**"</span>);</div><div class="line">        registry.addInterceptor(<span class="keyword">new</span> MyInterceptor2()).addPathPatterns(<span class="string">"/**"</span>);</div><div class="line">        <span class="keyword">super</span>.addInterceptors(registry);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序入口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootInterceptorApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootInterceptorApplication.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/shiyuan2he/springboot/tree/master/springboot-interceptor" target="_blank" rel="external">springboot-interceptor</a></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78706156" target="_blank" rel="external">springboot实战之整合freemarker模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78710113" target="_blank" rel="external">springboot实战之注册自定义Servlet</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78715725" target="_blank" rel="external">springboot实战之注册filter和listener</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,interceptor </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之6 注册filter和listener]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B6%20%E6%B3%A8%E5%86%8Cfilter%E5%92%8Clistener/</url>
      <content type="html"><![CDATA[<p>springboot项目实现filter及listener的注册<br><a id="more"></a></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在项目中有些特殊的处理需要用到过滤器及监听器，比如spring框架得字符过滤器CahracterEncodingFilter。</p>
<h2 id="code实现"><a href="#code实现" class="headerlink" title="code实现"></a>code实现</h2><p>MyFilter.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>,description = <span class="string">"自定义filter"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">        _logger.info(<span class="string">"MyFilter init ..."</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        _logger.info(<span class="string">"处理 filter 业务 ..."</span>);</div><div class="line">        filterChain.doFilter(servletRequest,servletResponse);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        _logger.info(<span class="string">"MyFilter destroy ..."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>MyListener.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass()) ;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</div><div class="line">        _logger.info(<span class="string">"contextInitialized"</span>);</div><div class="line">        _logger.info(servletContextEvent.getServletContext().getContextPath());</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent servletContextEvent)</span> </span>&#123;</div><div class="line">        _logger.info(<span class="string">"contextDestroyed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序入口 SpringBootFilterListenerApplication.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@ServletComponentScan</span>(&#123;</div><div class="line">        <span class="string">"com.hsy.springboot.filter.listener.filter"</span>,</div><div class="line">        <span class="string">"com.hsy.springboot.filter.listener.listener"</span></div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootFilterListenerApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootFilterListenerApplication.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>结果展示</p>
<p><img src="/uploads/springboot-filter1.png" alt="image"></p>
<p>项目结构图</p>
<p><img src="/uploads/springboot-filter2.png" alt="image"></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78706156" target="_blank" rel="external">springboot实战之整合freemarker模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78710113" target="_blank" rel="external">springboot实战之注册自定义Servlet</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,filter,listener </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之7 注册自定义Servlet]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B7%20%E6%B3%A8%E5%86%8C%E8%87%AA%E5%AE%9A%E4%B9%89Servlet/</url>
      <content type="html"><![CDATA[<p>springboot项目注册自定义的servlet<br><a id="more"></a></p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>在以前的web项目，servlet常用与特殊处理，比如验证码的实现，对外暴露http接口等等，重要性不言而喻。</p>
<p>springboot也有自己的实现servlet的方式。</p>
<ul>
<li><p>代码注册servlet</p>
<p>  通过ServletRegistrationBean、FilterRegistrationBean、ServletListenerRegistrationBean、ServletContextInitializer</p>
<p>  案例采用通过ServletRegistrationBean注册实现</p>
</li>
<li><p>注解注册servlet</p>
<p>  比较方便，首先再SpringBootApplication（springboot项目入口）上添加@ServletComponentScan注解，其次，是自定义Servlet上添加@WebServlet注解</p>
</li>
</ul>
<h2 id="一、代码注册实现"><a href="#一、代码注册实现" class="headerlink" title="一、代码注册实现"></a>一、代码注册实现</h2><p>自定义servlet   MyServlet.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 方法二：通过@WebServlet</span></div><div class="line"><span class="comment">//@WebServlet(urlPatterns = "/myServlet.view",description = "这事我自定义的servlet")</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger _logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        _logger.info(<span class="string">"===========doGet()============"</span>);</div><div class="line">        doPost(req, resp);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        _logger.info(<span class="string">"===========doPost()============"</span>);</div><div class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</div><div class="line">        resp.setContentType(<span class="string">"text/html"</span>);</div><div class="line">        PrintWriter out = resp.getWriter();</div><div class="line">        out.println(<span class="string">"&lt;html&gt;"</span>);</div><div class="line">        out.println(<span class="string">"&lt;head&gt;"</span>);</div><div class="line">        out.println(<span class="string">"&lt;title&gt;Hello World&lt;/title&gt;"</span>);</div><div class="line">        out.println(<span class="string">"&lt;/head&gt;"</span>);</div><div class="line">        out.println(<span class="string">"&lt;body&gt;"</span>);</div><div class="line">        out.println(<span class="string">"&lt;h1&gt;这是我自定义的Servlet&lt;/h1&gt;"</span>);</div><div class="line">        out.println(<span class="string">"&lt;/body&gt;"</span>);</div><div class="line">        out.println(<span class="string">"&lt;/html&gt;"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>自定义配置文件</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServertConfig</span> </span>&#123;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 方法一：通过ServletRegistrationBean注册</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">servletRegistrationBean</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> MyServlet(),<span class="string">"/myServlet/*"</span>) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>程序入口</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="comment">//@ServletComponentScan(basePackages = "com.hsy.springboot.servlet")</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootServletApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootServletApplication.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>项目结构图</p>
<p><img src="/uploads/springboot-servlet.png" alt=""></p>
<h2 id="二、注解实现"><a href="#二、注解实现" class="headerlink" title="二、注解实现"></a>二、注解实现</h2><p>1.将程序入口的//@ServletComponentScan(basePackages = “com.hsy.springboot.servlet”) 解注释</p>
<p>2.将MyServlet 中的   //@WebServlet(urlPatterns = “/myServlet.view”,description = “这事我自定义的servlet”) 解注释。</p>
<h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><p><a href="https://github.com/shiyuan2he/springboot" target="_blank" rel="external">springboot-servlet</a></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78706156" target="_blank" rel="external">springboot实战之整合freemarker模版引擎</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,servlet </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之9 整合freemarker模版引擎]]></title>
      <url>/2017/12/16/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B9%20%E6%95%B4%E5%90%88freemarker%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<p>本篇介绍springboot如何整合freemarker模版引擎<br><a id="more"></a></p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>springboot支持多种模版引擎包括：</p>
<ol>
<li>FreeMarker</li>
<li>Groovy</li>
<li>Thymeleaf （Spring 官网使用这个）</li>
<li>Velocity</li>
<li>JSP （SpringBoot官方不推荐使用）</li>
</ol>
<p>下面练习freemarker的使用。</p>
<h2 id="二、导包"><a href="#二、导包" class="headerlink" title="二、导包"></a>二、导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="三、controller层"><a href="#三、controller层" class="headerlink" title="三、controller层"></a>三、controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@description</span> &lt;p&gt;&lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@author</span> heshiyuan</div><div class="line">     * <span class="doctag">@date</span> 2017/12/2 20:56</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"/"</span>,<span class="string">"/index"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        request.setAttribute(<span class="string">"content"</span>,<span class="string">"this is index"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span> ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="四、配置页面"><a href="#四、配置页面" class="headerlink" title="四、配置页面"></a>四、配置页面</h2><p>index.ftl</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>this is index<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;content&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="五、启动"><a href="#五、启动" class="headerlink" title="五、启动"></a>五、启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootFreemarkerApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootFreemarkerApplication.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="六、项目结构图"><a href="#六、项目结构图" class="headerlink" title="六、项目结构图"></a>六、项目结构图</h2><p><img src="/uploads/springboot-freemarker.png" alt="image"></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78700999" target="_blank" rel="external">springboot实战之整合jsp模版引擎</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,freemarker </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之8 整合jsp模版引擎]]></title>
      <url>/2017/12/15/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B8%20%E6%95%B4%E5%90%88jsp%E6%A8%A1%E7%89%88%E5%BC%95%E6%93%8E/</url>
      <content type="html"><![CDATA[<p>springboot整合jsp模版引擎<br><a id="more"></a></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="http://blog.csdn.net/u012806787/article/details/78694912" target="_blank" rel="external">SpringBoot实战之入门</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78686998" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="http://blog.csdn.net/u012806787/article/details/78583814" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>springboot支持多种模版引擎包括：</p>
<ol>
<li>FreeMarker</li>
<li>Groovy</li>
<li>Thymeleaf （Spring 官网使用这个）</li>
<li>Velocity</li>
<li>JSP （貌似Spring Boot官方不推荐）</li>
</ol>
<p>不过本文还是选择大家都熟悉的JSP来作为研究案例。</p>
<h2 id="二、导包"><a href="#二、导包" class="headerlink" title="二、导包"></a>二、导包</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="三、controller层"><a href="#三、controller层" class="headerlink" title="三、controller层"></a>三、controller层</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * <span class="doctag">@description</span> &lt;p&gt;&lt;/p&gt;</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@author</span> heshiyuan</div><div class="line">     * <span class="doctag">@date</span> 2017/12/2 20:56</div><div class="line">     */</div><div class="line">    <span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"/"</span>,<span class="string">"/index"</span>&#125;)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpServletRequest request)</span></span>&#123;</div><div class="line">        request.setAttribute(<span class="string">"content"</span>,<span class="string">"this is index"</span>);</div><div class="line">        request.setAttribute(<span class="string">"time"</span>, Calendar.getInstance().getTime());</div><div class="line">        <span class="comment">// 自动映射到"/WEB-INF/jsp/"下</span></div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toPage1View"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">page1</span><span class="params">(Model model)</span></span>&#123;</div><div class="line">        model.addAttribute(<span class="string">"time"</span>,Calendar.getInstance().getTime()) ;</div><div class="line">        model.addAttribute(<span class="string">"content"</span>,<span class="string">"this is page1"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"page/page1"</span> ;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/toPage2View"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">page1</span><span class="params">(ModelAndView modelAndView)</span></span>&#123;</div><div class="line">        modelAndView.setViewName(<span class="string">"page/page2"</span>);</div><div class="line">        modelAndView.addObject(<span class="string">"time"</span>,Calendar.getInstance().getTime()) ;</div><div class="line">        modelAndView.addObject(<span class="string">"content"</span>,<span class="string">"this is page1"</span>) ;</div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="四、配置文件"><a href="#四、配置文件" class="headerlink" title="四、配置文件"></a>四、配置文件</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">spring.thymeleaf.cache=false</div><div class="line">spring.thymeleaf.enabled=false</div><div class="line">spring.mvc.view.prefix=/WEB-INF/jsp/</div><div class="line">spring.mvc.view.suffix=.jsp</div></pre></td></tr></table></figure>
<h2 id="五、配置页面"><a href="#五、配置页面" class="headerlink" title="五、配置页面"></a>五、配置页面</h2><p>index.html</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">%@page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=utf-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>主页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    $&#123;content&#125;</div><div class="line">    $&#123;time&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>page/page1.jsp   page/page2.jsp均是类似的页面。</p>
<h2 id="六、启动"><a href="#六、启动" class="headerlink" title="六、启动"></a>六、启动</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootJspApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(SpringBootJspApplication.class,args);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="七、项目结构图"><a href="#七、项目结构图" class="headerlink" title="七、项目结构图"></a>七、项目结构图</h2><p><img src="/uploads/springboot-jsp2.png" alt="image"></p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>此demo最后没有运行运行成功，提示如下错误，正在解决当中，有线索的道友感谢提供帮助。</p>
<p><img src="/uploads/springboot-jsp1.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,jsp,模版引擎 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之1 入门]]></title>
      <url>/2017/11/24/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B1%20%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>3年以上的Java开发，无论是公司的项目或者是自己的项目，肯定经历过大量配置文件的配置，维护，特别是spring3.0之前版本开发的web项目，配置文件多大十几个（spring3.0之后提供了注解替代部分配置文件），费心费脑还容易出错。<br><a id="more"></a></p>
<h2 id="历史文章"><a href="#历史文章" class="headerlink" title="历史文章"></a>历史文章</h2><p><a href="https://shiyuan2he.github.io/2017/11/20/springboot%E5%AE%9E%E6%88%98%E4%B9%8B%E4%B8%80%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/" target="_blank" rel="external">springboot实战之文章汇总</a></p>
<p><a href="https://shiyuan2he.github.io/2017/11/20/springboot%E5%AE%9E%E6%88%98%E4%B9%8B%E4%B8%80%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/" target="_blank" rel="external">springboot实战之读取配置文件</a></p>
<h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><ul>
<li>3年以上的Java开发，无论是公司的项目或者是自己的项目，肯定经历过大量配置文件的配置，维护，特别是spring3.0之前版本开发的web项目，配置文件多大十几个（spring3.0之后提供了注解替代部分配置文件），费心费脑还容易出错。</li>
<li>随着功能以及业务逻辑的日益复杂，大量的bean配置到xml或者是注解，徒增配置文件的数量</li>
<li>spring集成dubbo，redis，rabbit，mail等等第三方都需要新增配置项</li>
</ul>
<p>Spring Boot正是在这样的一个背景下被抽象出来的开发框架。</p>
<ul>
<li>它本身并不提供Spring框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于Spring框架的应用程序。</li>
<li>它不是用来替代Spring的解决方案，而是和Spring框架紧密结合用于提升Spring开发者体验的工具。</li>
<li>它集成了大量常用的第三方库配置（例如Jackson,JDBC,Mongo,Redis,Mail等等），SpringBoot应用中这些第三方库几乎可以零配置的开箱即用（out-of-the-box），大部分的Spring Boot应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。</li>
</ul>
<h2 id="二、特点"><a href="#二、特点" class="headerlink" title="二、特点"></a>二、特点</h2><ul>
<li>不生成代码，且完全不需要XML配置</li>
<li>为Spring开发工作提供一个更快、更广泛的入门经验。</li>
<li>开箱即用，你也可以通过修改默认值来快速满足你的项目的需求。</li>
</ul>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[spring实战1 读取配置文件属性]]></title>
      <url>/2017/11/23/spring%E5%AE%9E%E6%88%981_%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B1%9E%E6%80%A7/</url>
      <content type="html"><![CDATA[<p>在现实工作中，我们常常需要保存一些系统配置信息，大家一般都会选择配置文件来完成比如jdbc连接信息，邮件服务器信息，接口地址及版本信息等等。<br><a id="more"></a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在现实工作中，我们常常需要保存一些系统配置信息，大家一般都会选择配置文件来完成比如jdbc连接信息，邮件服务器信息，接口地址及版本信息等等。但读取*.properties文件有N多种方式，本文根据我工作中用到的读取properties配置文件的方法小小总结一下，主要叙述的是spring读取配置文件的方法。</p>
<h2 id="设置配置文件"><a href="#设置配置文件" class="headerlink" title="设置配置文件"></a>设置配置文件</h2><p>例如jdbc连接信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mariadb.config.url=jdbc:mariadb:<span class="comment">//192.168.216.129:3306/config?useUnicode=true?characterEncoding=utf-8</span></div><div class="line">mariadb.config.username=root</div><div class="line">mariadb.config.password=root<span class="meta">@mariadb</span></div><div class="line">mariadb.config.driverClass=org.mariadb.jdbc.Driver</div><div class="line">mariadb.config.env=dev</div><div class="line">mariadb.config.override=<span class="keyword">true</span></div><div class="line">mariadb.config.appId=spring_config</div></pre></td></tr></table></figure>
<h2 id="spring启动加载配置文件"><a href="#spring启动加载配置文件" class="headerlink" title="spring启动加载配置文件"></a>spring启动加载配置文件</h2><p>配置文件位置  src\main\resources\properties\config.properties</p>
<ul>
<li><h3 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h3></li>
</ul>
<ol>
<li><h4 id="加载方式"><a href="#加载方式" class="headerlink" title="加载方式"></a>加载方式</h4></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;!--读取配置文件：方法一 --&gt;</div><div class="line">&lt;!--</div><div class="line">    &lt;context:property-placeholder</div><div class="line">    location=&quot;属性文件，多个之间逗号分隔&quot;</div><div class="line">    file-encoding=&quot;文件编码&quot;</div><div class="line">    ignore-resource-not-found=&quot;是否忽略找不到的属性文件&quot;</div><div class="line">    ignore-unresolvable=&quot;是否忽略解析不到的属性，如果不忽略，找不到将抛出异常&quot;</div><div class="line">    properties-ref=&quot;本地Properties配置&quot;</div><div class="line">    local-override=&quot;是否本地覆盖模式，即如果true，那么properties-ref的属性将覆盖location加载的属性，否则相反&quot;</div><div class="line">    system-properties-mode=&quot;系统属性模式，默认ENVIRONMENT（表示先找ENVIRONMENT，再找properties-ref/location的），NEVER：表示永远不用ENVIRONMENT的，OVERRIDE类似于ENVIRONMENT&quot;</div><div class="line">    order=&quot;顺序&quot;</div><div class="line">    /&gt;</div><div class="line">--&gt;</div><div class="line">&lt;context:property-placeholder location=&quot;classpath:/properties/jdbc.properties&quot; file-encoding=&quot;utf-8&quot; ignore-unresolvable=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure>
<ol>
<li><h4 id="应用方式"><a href="#应用方式" class="headerlink" title="应用方式"></a>应用方式</h4></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;dataSource&quot; class=&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;&gt;</div><div class="line">    &lt;property name=&quot;driverClass&quot; value=&quot;$&#123;driver&#125;&quot;/&gt;</div><div class="line">    &lt;property name=&quot;jdbcUrl&quot; value=&quot;$&#123;url&#125;&quot;/&gt;</div><div class="line">    &lt;property name=&quot;user&quot; value=&quot;$&#123;username&#125;&quot;/&gt;</div><div class="line">    &lt;property name=&quot;password&quot; value=&quot;$&#123;password&#125;&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;!-- c3p0 私有配置 --&gt;</div><div class="line">    &lt;property name=&quot;maxPoolSize&quot; value=&quot;30&quot;/&gt;</div><div class="line">    &lt;property name=&quot;minPoolSize&quot; value=&quot;10&quot;/&gt;</div><div class="line">    &lt;!-- 关闭连接不自动提交 --&gt;</div><div class="line">    &lt;property name=&quot;autoCommitOnClose&quot; value=&quot;false&quot;/&gt;</div><div class="line">    &lt;!--获取连接超时时间--&gt;</div><div class="line">    &lt;property name=&quot;checkoutTimeout&quot; value=&quot;1000&quot;/&gt;</div><div class="line">    &lt;!--当获取连接失败，重试次数--&gt;</div><div class="line">    &lt;property name=&quot;acquireIncrement&quot; value=&quot;2&quot;/&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h3></li>
</ul>
<ol>
<li><h4 id="配置方式"><a href="#配置方式" class="headerlink" title="配置方式"></a>配置方式</h4></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;!--java中获取配置文件属性  配套使用 ConfigBean.java--&gt;</div><div class="line">&lt;bean id=&quot;config&quot; class=&quot;org.springframework.beans.factory.config.PropertiesFactoryBean&quot;&gt;</div><div class="line">    &lt;property name=&quot;locations&quot;&gt;</div><div class="line">        &lt;array&gt;</div><div class="line">            &lt;value&gt;classpath:/properties/config.properties&lt;/value&gt;</div><div class="line">        &lt;/array&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<ol>
<li><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;config.name&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String name ;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;config.age&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> Integer age ;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@PostConstruct</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        System.out.println(<span class="string">"ConfigBean======================"</span>+name+age) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><h4 id="代码应用"><a href="#代码应用" class="headerlink" title="代码应用"></a>代码应用</h4></li>
</ol>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Autowired</span></div><div class="line"><span class="keyword">private</span> ConfigBean configBean ;</div></pre></td></tr></table></figure>
<ul>
<li><h3 id="方式三"><a href="#方式三" class="headerlink" title="方式三"></a>方式三</h3></li>
</ul>
<p>只提供一种思路。<br><br>随着项目越来越大，有些配置项越来越多，管理起来很不方便，这时候将配置文件放置再数据库就是一种很好的解决办法。当服务启动时去数据库读取加载在内存中，供服务运行期间使用。而项目只放数据库连接信息。</p>
<p>实现大致思路。</p>
<ol>
<li><h4 id="配置文件配置数据库信息"><a href="#配置文件配置数据库信息" class="headerlink" title="配置文件配置数据库信息"></a>配置文件配置数据库信息</h4></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mariadb.config.url=jdbc:mariadb://192.168.216.129:3306/config?useUnicode=true?characterEncoding=utf-8</div><div class="line">mariadb.config.username=root</div><div class="line">mariadb.config.password=root@mariadb</div><div class="line">mariadb.config.driverClass=org.mariadb.jdbc.Driver</div><div class="line">mariadb.config.env=dev</div><div class="line">mariadb.config.override=true</div><div class="line">mariadb.config.appId=spring_config</div></pre></td></tr></table></figure>
<ol>
<li><h4 id="spring配置文件配置如下"><a href="#spring配置文件配置如下" class="headerlink" title="spring配置文件配置如下"></a>spring配置文件配置如下</h4></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;bean id=&quot;propertyConfigurer&quot; class=&quot;com.hsy.java.util.jdbc.PropertyConfig&quot;&gt;</div><div class="line">    &lt;property name=&quot;locations&quot;&gt;</div><div class="line">        &lt;list&gt;</div><div class="line">            &lt;value&gt;classpath*:/properties/config.properties&lt;/value&gt;</div><div class="line">        &lt;/list&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;!-- 是否加载插件。当为false或者没有配置configList都视为不加载插件读取配置--&gt;</div><div class="line">    &lt;property name=&quot;loadPlugin&quot; value=&quot;true&quot; /&gt;</div><div class="line">    &lt;property name=&quot;configList&quot;&gt;</div><div class="line">        &lt;list&gt;</div><div class="line">            &lt;ref bean=&quot;jdbcConfigHelper&quot;/&gt;</div><div class="line">        &lt;/list&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">    &lt;property name=&quot;ignoreUnresolvablePlaceholders&quot; value=&quot;true&quot; /&gt;</div><div class="line">    &lt;property name=&quot;ignoreResourceNotFound&quot; value=&quot;true&quot;/&gt;</div><div class="line">    &lt;property name=&quot;fileEncoding&quot; value=&quot;utf-8&quot;/&gt;</div><div class="line">&lt;/bean&gt;</div><div class="line"></div><div class="line">&lt;bean id=&quot;jdbcConfigHelper&quot; class=&quot;com.hsy.java.util.jdbc.JdbcConfigHelper&quot;&gt;</div><div class="line">    &lt;!-- 排除的key，这些key自己加载 --&gt;</div><div class="line">    &lt;property name=&quot;excludeKeys&quot;&gt;</div><div class="line">        &lt;set&gt;</div><div class="line">            &lt;value&gt;name&lt;/value&gt;</div><div class="line">            &lt;value&gt;age&lt;/value&gt;</div><div class="line">        &lt;/set&gt;</div><div class="line">    &lt;/property&gt;</div><div class="line">&lt;/bean&gt;</div></pre></td></tr></table></figure>
<ol>
<li><h4 id="代码实现暂不赘述"><a href="#代码实现暂不赘述" class="headerlink" title="代码实现暂不赘述"></a>代码实现暂不赘述</h4></li>
</ol>
<p>有需要代码的可以去我的github上去clone<br><a href="https://github.com/shiyuan2he/spring/tree/master/spring-config" target="_blank" rel="external">github源码地址</a></p>
]]></content>
      
        <categories>
            
            <category> spring实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> spring,配置文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[SpringBoot实战之2 读取配置文件]]></title>
      <url>/2017/11/20/SpringBoot%E5%AE%9E%E6%88%98%E4%B9%8B2%20%E8%AF%BB%E5%8F%96%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>我们聊一聊最近很火的springboot，它可以很快捷，快速的创建一个spring的web项目。说白一点，他是spring+springMVC+持久层框架+数据源连接池+web容器+。。。的脚手架.<br><a id="more"></a></p>
<h2 id="大话springboot"><a href="#大话springboot" class="headerlink" title="大话springboot"></a>大话springboot</h2><p>我们聊一聊最近很火的springboot，它可以很快捷，快速的创建一个spring的web项目。说白一点，他是spring+springMVC+持久层框架+数据源连接池+web容器+。。。的脚手架。<br>springboot的设计目的是用来简化新Spring应用的初始搭建以及开发过程。对于很熟练的开发（以我所见，起码是处于开发一线3年以上期间的才算熟练），spingboot的出现无疑是福音。否则，强行去运用springboot反而适得其反，黑盒开发。如果一定要用springboot，那么一定要多动脑，多思考，多去开源社区走走开发前辈趟出来坑。</p>
<h2 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;parent&gt;</div><div class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</div><div class="line">    &lt;version&gt;1.5.8.RELEASE&lt;/version&gt;</div><div class="line">&lt;/parent&gt;</div><div class="line">&lt;dependencies&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</div><div class="line">        &lt;scope&gt;test&lt;/scope&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">    &lt;dependency&gt;</div><div class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</div><div class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</div><div class="line">    &lt;/dependency&gt;</div><div class="line">&lt;/dependencies&gt;</div></pre></td></tr></table></figure>
<p>导入以上jar包即可进行简单的spingboot项目开发</p>
<h2 id="配置文件和启动入口"><a href="#配置文件和启动入口" class="headerlink" title="配置文件和启动入口"></a>配置文件和启动入口</h2><p>resources文件夹下新建application.yml 文件。文件内容如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">spring:</div><div class="line">  profiles:</div><div class="line">    active: dev</div></pre></td></tr></table></figure>
<p>resources文件夹下新建application-dev.yml 文件。文件内容如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">server:</div><div class="line">  port: <span class="number">9527</span></div></pre></td></tr></table></figure>
<p>src文件夹下建包并创建java文件，内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringbootConfigApplication</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</div><div class="line">        SpringApplication.run(SpringbootConfigApplication.class,args) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时已经创建好基于springboot的web项目，可以启动SpringbootConfigApplication的main方法，然后用telnet localhost 9527 能够连接上服务。</p>
<h2 id="读取项目配置文件内容"><a href="#读取项目配置文件内容" class="headerlink" title="读取项目配置文件内容"></a>读取项目配置文件内容</h2><p>在resources文件夹下新建test.properties，内容如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">com.hsy.name=heshiyuan</div><div class="line">com.hsy.age=<span class="number">18</span></div></pre></td></tr></table></figure>
<p>在SpringbootConfigApplication所在包下新建bean包（很重要，springboot只会扫描入口类层级一下的注解），并新建user.java文件，内容如下</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="meta">@PropertySource</span>(value = <span class="string">"classpath:test.properties"</span>)</div><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"com.hsy"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.age = age;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在application.yml添加如下内容，实现第二种配置属性读取。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">my:</div><div class="line"> name: heshiyuan</div><div class="line"> age: <span class="number">18</span></div><div class="line"> number:  $&#123;random.<span class="keyword">int</span>&#125;</div><div class="line"> uuid : $&#123;random.uuid&#125;</div><div class="line"> max: $&#123;random.<span class="keyword">int</span>(<span class="number">10</span>)&#125;</div><div class="line"> value: $&#123;random.value&#125;</div><div class="line"> greeting: hi,i<span class="string">'m  $&#123;my.name&#125;</span></div></pre></td></tr></table></figure>
<p>bean包下新建ConfigBean.java.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"my"</span>)</div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConfigBean</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> number;</div><div class="line">    <span class="keyword">private</span> String uuid;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> max;</div><div class="line">    <span class="keyword">private</span> String value;</div><div class="line">    <span class="keyword">private</span> String greeting;</div><div class="line">    <span class="comment">//...省略seter，getter方法</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="提供http-api接口"><a href="#提供http-api接口" class="headerlink" title="提供http api接口"></a>提供http api接口</h2><p>在bean包统计目录创建controller包，并新建RestfulController.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"/api/restful/"</span>)</div><div class="line"><span class="meta">@EnableConfigurationProperties</span>(&#123;ConfigBean.class,User.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RestfulController</span> </span>&#123;</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    ConfigBean configBean;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/v1.0/configBean"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">beanValue</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> configBean.getGreeting()+<span class="string">" &gt;&gt;&gt;&gt;"</span>+configBean.getName()+<span class="string">" &gt;&gt;&gt;&gt;"</span>+ configBean.getUuid()+<span class="string">" &gt;&gt;&gt;&gt;"</span>+configBean.getMax();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    User user;</div><div class="line">    <span class="meta">@RequestMapping</span>(value = &#123;<span class="string">"/v1.0/user/list"</span>,<span class="string">"/users"</span>&#125;,method = RequestMethod.GET,produces = MediaType.APPLICATION_JSON_UTF8_VALUE)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">user</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> user.getName()+user.getAge();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;my.name&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;my.age&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/v1.0/my"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">dataValue</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> name+<span class="string">":"</span>+age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>用postman api工具进行测试</p>
<p><img src="uploads/springboot-config.png" alt="image"></p>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><p>项目源码：<a href="https://github.com/shiyuan2he/springboot.git" target="_blank" rel="external">https://github.com/shiyuan2he/springboot.git</a></p>
]]></content>
      
        <categories>
            
            <category> SpringBoot实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> springboot,配置文件 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学之7-redis-4.0.1单例服务器搭建]]></title>
      <url>/2017/08/22/centos7%E8%87%AA%E5%AD%A6%E4%B9%8B7-redis-4.0.1%E5%8D%95%E4%BE%8B%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>摘要: redis作为一种NoSql数据库，其提供了一种高效的缓存方案，本文则主要对其单例，主从模式，sentinel以及集群的配置方式进行说明，对比其优缺点，阐述redis作为一种缓存框架的高可用性。<br><a id="more"></a></p>
<h2 id="redis简介"><a href="#redis简介" class="headerlink" title="redis简介"></a>redis简介</h2><p> redis作为一种高效的缓存框架，使用是非常广泛的，在数据存储上，在运行时其将数据存储在内存中，以实现数据的高效读写，并且根据定制的持久化规则不同，其会不定期的将数据持久化到硬盘中。另外相较于其他的NoSql数据库，redis提供了非常丰富的数据结构，如dict，sds，linkedlist，ziplist，set，quicklist，geometry。在这些存储结构的基础上，redis为用户提供了非常丰富的操作选择，如通过zskiplist来达到对某种类型的数据的排序目的，而排序在数据库中是一个非常耗时的操作。redis是一个key-value存储系统。和Memcached类似，它支持存储的value类型相对更多，包括string(字符串)、list(链表)、set(集合)、zset(sorted set –有序集合)和hash（哈希类型）。这些数据类型都支持push/pop、add/remove及取交集并集和差集及更丰富的操作，而且这些操作都是原子性的。在此基础上，redis支持各种不同方式的排序。与memcached一样，为了保证效率，数据都是缓存在内存中。区别的是redis会周期性的把更新的数据写入磁盘或者把修改操作写入追加的记录文件，并且在此基础上实现了master-slave(主从)同步。</p>
<h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><p>redis相对于其他的缓存框架安装非常的方便，只需要从<a href="http://download.redis.io/releases/redis-4.0.1.tar.gz" target="_blank" rel="external">https://redis.io/download</a>下载后解压,执行命令启动服务即可完成安装</p>
<h3 id="redis下载"><a href="#redis下载" class="headerlink" title="redis下载"></a>redis下载</h3><blockquote>
<p>cd /root/data <br><br>wget <a href="http://download.redis.io/releases/redis-4.0.1.tar.gz" target="_blank" rel="external">http://download.redis.io/releases/redis-4.0.1.tar.gz</a> <br><br>tar -xzvf redis-4.0.1.tar.gz <br><br>cd redis-4.0.1</p>
</blockquote>
<h3 id="redis安装-1"><a href="#redis安装-1" class="headerlink" title="redis安装"></a>redis安装</h3><p>进入redis-4.0.1执行make命令，注意，make是gcc库里的命令，如果报错请先安装gcc</p>
<blockquote>
<p>yum -y install gcc <br><br>make</p>
</blockquote>
<p>make会生成很多命令到src文件夹，进入文件夹可以看到有redis-server,reids-cli等命令，说明make成功</p>
<blockquote>
<p>make install PREFIX=/usr/local/redis</p>
</blockquote>
<p>此命令会将redis常用命令安装到/usr/local/redis/bin下面，如果/usr/local/redis/bin下面有以下命令即为安装redis成功</p>
<p><img src="/uploads/redis1.png" alt=""></p>
<h3 id="redis配置"><a href="#redis配置" class="headerlink" title="redis配置"></a>redis配置</h3><p>将解压的redis文件夹肿的redis.conf配置文件复制到/usr/local/redis/bin/，并用配置文件启动</p>
<blockquote>
<p> cp redis-4.0.1/redis.conf /usr/local/redis/bin/</p>
</blockquote>
<p>编辑redis.conf</p>
<blockquote>
<p>vim /usr/local/redis/bin/redis.conf</p>
</blockquote>
<p>1.将daemonize 由no改为yes    设置成开机启动</p>
<p>2.将bind localhost(127.0.0.1) 注释掉 否则其他主机不能连接</p>
<p>3.将protected-mode 设置为no 默认为yes需要使用密码</p>
<h2 id="启动redis"><a href="#启动redis" class="headerlink" title="启动redis"></a>启动redis</h2><p>以配置文件启动</p>
<blockquote>
<p> ./redis-server redis.conf</p>
</blockquote>
<p><img src="/uploads/redis2.png" alt=""></p>
<p>1.查看是否启动成功</p>
<p><img src="/uploads/reids3.png" alt=""></p>
<p>2.用redisclient或者redis desktop manage客户端工具连接测试。</p>
<h2 id="关闭redis"><a href="#关闭redis" class="headerlink" title="关闭redis"></a>关闭redis</h2><p>命令行ctrl+c即可退出redis服务，或者使用命令关闭</p>
<blockquote>
<p> ./redis-cli shutdown</p>
</blockquote>
<h2 id="恭喜，完成redis单实例的搭建"><a href="#恭喜，完成redis单实例的搭建" class="headerlink" title="恭喜，完成redis单实例的搭建"></a>恭喜，完成redis单实例的搭建</h2>]]></content>
      
        <categories>
            
            <category> linux自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> redis </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学之6-基于solr6.6的solrcloud集群搭建]]></title>
      <url>/2017/08/13/centos7%E8%87%AA%E5%AD%A6%E4%B9%8B6-%E5%9F%BA%E4%BA%8Esolr6.6%E7%9A%84solrcloud%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA/</url>
      <content type="html"><![CDATA[<p>SolrCloud(solr集群)是Solr提供的分布式搜索方案。<br><a id="more"></a></p>
<h2 id="Solrcloud介绍"><a href="#Solrcloud介绍" class="headerlink" title="Solrcloud介绍"></a>Solrcloud介绍</h2><p>SolrCloud(solr集群)是Solr提供的分布式搜索方案。<br>当你需要大规模，容错，分布式索引和检索能力时使用SolrCloud。<br>当索引量很大，搜索请求并发很高时，同样需要使用SolrCloud来满足这些需求。<br>不过当一个系统的索引数据量少的时候是没有必要使用SolrCloud的。<br>SolrCloud是基于Solr和Zookeeper的分布式搜索方案。<br>它的主要思想是使用Zookeeper作为SolrCloud集群的配置信息中心，统一管理solrcloud的配置，比如solrconfig.xml和schema.xml。</p>
<h2 id="Solrcloud特点"><a href="#Solrcloud特点" class="headerlink" title="Solrcloud特点"></a>Solrcloud特点</h2><p>1.集中式的配置信息 <br><br>2.自动容错<br><br>3.近实时搜索<br><br>4.查询时自动负载均衡<br></p>
<h2 id="Solrcloud结构"><a href="#Solrcloud结构" class="headerlink" title="Solrcloud结构"></a>Solrcloud结构</h2><p>solrcloud为了降低单机的处理压力，需要由多台服务器共同来完成索引和搜索任务。实现的思路是将索引数据进行Shard分片，每个分片由多台服务器共同完成，当一个索引或搜索请求过来时会分别从不同的Shard的服务器中操作索引。solrcloud是基于solr和zookeeper部署，zookeeper是一个集群管理软件，solrcloud需要由多台solr服务器组成，然后由zookeeper来进行协调管理。<br>由于solrcloud一般都是解决大数据量、大并发的搜索服务，所以搭建solrcloud之前，首先需要搭建zookeeper注册中心集群。</p>
<h2 id="Solrcloud安装"><a href="#Solrcloud安装" class="headerlink" title="Solrcloud安装"></a>Solrcloud安装</h2><h3 id="搭建zookeeper集群步骤：需要三台zookeeper、分别是zk1、zk2、zk3，对应的端口分别为2281、2282、2283。"><a href="#搭建zookeeper集群步骤：需要三台zookeeper、分别是zk1、zk2、zk3，对应的端口分别为2281、2282、2283。" class="headerlink" title="搭建zookeeper集群步骤：需要三台zookeeper、分别是zk1、zk2、zk3，对应的端口分别为2281、2282、2283。"></a>搭建zookeeper集群步骤：需要三台zookeeper、分别是zk1、zk2、zk3，对应的端口分别为2281、2282、2283。</h3><p>1.安装jdk环境，tomcat，zookeeper依赖java环境，参考这里<a href="http://blog.csdn.net/u012806787/article/details/77096058" target="_blank" rel="external">centos7自学之2-jdk配置</a></p>
<p>2.下载并配置zookeeper环境，解压到/home/root/solrcloud/zk1/</p>
<blockquote>
<p>cd /home/root/data/ <br><br>wget <a href="http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz" target="_blank" rel="external">http://mirror.bit.edu.cn/apache/zookeeper/zookeeper-3.4.10/zookeeper-3.4.10.tar.gz</a><br><br>tar -zxf zookeeper-3.4.10.tar.gz <br><br>mv zookeeper-3.4.10 ../solrcloud/zk1</p>
</blockquote>
<p>3.进入zk1/conf目录，将zoo_sample.cfg文件名称改为zoo.cfg</p>
<blockquote>
<p>cd ../solrcloud/zk1/conf <br><br>mv zoo_sample.cfg zoo.cfg</p>
</blockquote>
<p>4.修改zoo.cfg文件，配置集群信息(俩个截图信息都是配置在zoo.cfg文件中)</p>
<blockquote>
<p>mkdir ../data <br><br>vim zoo.cfg</p>
</blockquote>
<p><img src="/uploads/solrcloud1.png" alt=""></p>
<p>5.在dataDir(对应zoo.cfg配置文件中的目录结构)目录下创建myid文件，文件内容为1，对应server.1中的1。</p>
<blockquote>
<p>vim /home/root/solrcloud/zk1/data/myid</p>
</blockquote>
<p><img src="/uploads/solrcloud2.png" alt=""></p>
<p>6.拷贝zk1，复制两个目录zk2、zk3。并修改zoo.cfg和myid两个文件为对应的内容。</p>
<blockquote>
<p>cp -r zk1 zk2 <br><br>cp -r zk1 zk3 <br><br>vim /home/root/solrcooud/zk2/conf/zoo.cfg <br><br>vim /home/root/solrcooud/zk3/conf/zoo.cfg </p>
</blockquote>
<p><img src="/uploads/solrcloud3.png" alt=""></p>
<p><img src="/uploads/solrcloud4.png" alt=""></p>
<p>zk2,zk3 对应的myid改为2，3</p>
<blockquote>
<p>vim solrcloud/zk3/data/myid <br><br>vim solrcloud/zk2/data/myid</p>
</blockquote>
<h3 id="solr集群部署"><a href="#solr集群部署" class="headerlink" title="solr集群部署"></a>solr集群部署</h3><p>1.复制4个单机版solr服务对应的tomcat，并分别修改端口为：8081、8082、8083、8084。<br>单机版solr服务器可以参考这里部署<a href="http://blog.csdn.net/u012806787/article/details/77098148" target="_blank" rel="external">centos7自学之4-solr6.6搜索服务器安装及IK分词器配置 </a></p>
<blockquote>
<p> cp -r solr/tomcat-solr-8080 solrcloud/tomcat-solr-8081 <br><br> cp -r solr/tomcat-solr-8080 solrcloud/tomcat-solr-8082 <br><br> cp -r solr/tomcat-solr-8080 solrcloud/tomcat-solr-8083 <br><br> cp -r solr/tomcat-solr-8080 solrcloud/tomcat-solr-8084 <br></p>
</blockquote>
<p>2.复制4个solrhome，分别为solrhome8081、solrhome8082、solrhome8083、solrhome8084。一个solr实例对应一个solrhome。<br>solehome部署方式请参考这里<a href="http://blog.csdn.net/u012806787/article/details/77098148" target="_blank" rel="external">centos7自学之4-solr6.6搜索服务器安装及IK分词器配置 </a></p>
<p>做完之后如下图</p>
<p><img src="/uploads/solrcloud5.png" alt=""></p>
<p>3.修改每个solr服务对应的Tomcat容器中solr项目的web.xml文件中的内容(目录结构为/home/root/solrcloud/tomcat-solr-8081/webapps/solr/WEB-INF)</p>
<blockquote>
<p> vim tomcat-solr-8081/webapps/solr/WEB-INF/web.xml </p>
</blockquote>
<p><img src="/uploads/solrcloud6.png" alt=""></p>
<p>同理更改剩下的三个tomcat</p>
<p>4.修改每个solrhome下的solr.xml，指定对应solr服务的tomcat的ip和端口。</p>
<blockquote>
<p>vim solrhome8081/solr.xml </p>
</blockquote>
<p><img src="/uploads/solrcloud7.png" alt=""></p>
<p>5.设置tomcat的启动参数，在每个tomcat目录下的bin/catalina.sh，添加以下内容：</p>
<blockquote>
<p>JAVA_OPTS=”-DzkHost=192.168.216.129:2281,192.168.216.129:2282,192.168.216.129:2283” <br><br>vim tomcat-solr-8081/bin/catalina.sh </p>
</blockquote>
<p><img src="/uploads/solrcloud8.png" alt=""></p>
<p>6.将solr配置文件上传到zookeeper中，进行统一管理，进入到/solr/solr-6.6.0/server/scripts/cloud-scripts/目录中执行zkcli.sh命令：</p>
<blockquote>
<p>./zkcli.sh -zkhost 192.168.216.129:2281,192.168.216.129:2282,192.168.216.129:2283 -cmd   upconfig -confdir /usr/local/solrcloud/solrhome8280/collection1/conf -confname   myconf(每个ip地址之间用逗号分隔)</p>
</blockquote>
<p><img src="/uploads/solrcloud9.png" alt=""></p>
<p>7.编写脚本文件<br>启动所有的zookeeper服务</p>
<blockquote>
<p>mkdir /home/root/myShell <br><br>vim zk-start-all.sh</p>
</blockquote>
<p><img src="/uploads/solrcloud10.png" alt=""></p>
<p>监控所有zk服务启动状态</p>
<blockquote>
<p>vim zk-status-all.sh </p>
</blockquote>
<p><img src="/uploads/solrcloud11.png" alt=""></p>
<p>停止所有zk服务</p>
<blockquote>
<p>vim zk-stop-all.sh </p>
</blockquote>
<p><img src="/uploads/solrcloud12.png" alt=""></p>
<p>启动所有tomcat服务器</p>
<blockquote>
<p>vim tomcat-start-all.sh  </p>
</blockquote>
<p><img src="/uploads/solrcloud13.png" alt=""></p>
<p>停止所有tomcat服务器</p>
<blockquote>
<p>vim tomcat-shutdown-all.sh   </p>
</blockquote>
<p><img src="/uploads/solrcloud14.png" alt=""></p>
<p>给创建的脚本赋权</p>
<blockquote>
<p>chmod a+x zk-status-all.sh <br><br>…</p>
</blockquote>
<p>8.访问部署的solr集群中任意的端口服务</p>
<p><img src="/uploads/solrcloud15.png" alt=""></p>
<h2 id="solrcloud部署完成"><a href="#solrcloud部署完成" class="headerlink" title="solrcloud部署完成"></a>solrcloud部署完成</h2>]]></content>
      
        <categories>
            
            <category> linux自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> solr,solrcloud </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学之5-solr6.6搜索服务器安装及IK分词器配置]]></title>
      <url>/2017/08/11/centos7%E8%87%AA%E5%AD%A6%E4%B9%8B5-solr6.6%E6%90%9C%E7%B4%A2%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85%E5%8F%8AIK%E5%88%86%E8%AF%8D%E5%99%A8%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>Solr是一个高性能，采用Java5开发，Solr基于Lucene的全文搜索服务器。同时对其进行了扩展，提供了比Lucene更为丰富的查询语言，同时实现了可配置、可扩展并对查询性能进行了优化，并且提供了一个完善的功能管理界面，是一款非常优秀的全文搜索引擎。<br><a id="more"></a></p>
<h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>安装前请确保centos7系统已经安装过jdk8和tomcat8 <br><br>jdk安装请参考<a href="http://blog.csdn.net/u012806787/article/details/77096058" target="_blank" rel="external">http://blog.csdn.net/u012806787/article/details/77096058</a>  <br><br>tomcat安装请参考<a href="http://blog.csdn.net/u012806787/article/details/77096522" target="_blank" rel="external">centos7自学之3-tomcat环境配置</a></p>
<h2 id="下载solr"><a href="#下载solr" class="headerlink" title="下载solr"></a>下载solr</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">cd /root/data</div><div class="line">wget http:<span class="comment">//apache.fayea.com/lucene/solr/6.6.0/solr-6.6.0.tgz</span></div><div class="line">tar -zxvf solr-<span class="number">6.6</span>.0.tgz</div><div class="line">mv solr-<span class="number">6.6</span>.0 ../solr/</div></pre></td></tr></table></figure>
<p>将tomcat解压后的文件夹移动到/root/solr/下面，如图 <br><br><img src="/uploads/solr.png" alt=""></p>
<h2 id="安装solr"><a href="#安装solr" class="headerlink" title="安装solr"></a>安装solr</h2><p>1.将/root/solr/solr-6.6.0/server/solr-webapp/webapp文件夹复制到tomcat\webapps\下</p>
<blockquote>
<p>mv /root/solr/solr-6.6.0/server/solr-webapp/webapp solr/tomcat-solr-8080/webapps/solr</p>
</blockquote>
<p>2.将/root/solr/solr-6.6.0/server/lib/ext中的jar全部复制到/root/solr/tomcat-solr-8080/webapps/solr/WEB-INF/lib/目录中</p>
<blockquote>
<p> mv solr/solr-6.6.0/server/lib/ext/*.jar solr/tomcat-solr-8080/webapps/solr/WEB-INF/lib/</p>
</blockquote>
<p>3.将/root/solr/solr-6.6.0/server/lib/metrics*开头的jar全部复制到solr/tomcat-solr-8080/webapps/solr/WEB-INF/lib/目录中</p>
<blockquote>
<p>mv solr/solr-6.6.0/server/lib/metrics-*.jar solr/tomcat-solr-8080/webapps/solr/WEB-INF/lib/</p>
</blockquote>
<p>4.在/root/solr/tomcat-solr-8080/webapps/solr/WEB-INF下新建classes文件夹</p>
<blockquote>
<p>mkdir /root/solr/tomcat-solr-8080/webapps/solr/WEB-INF/classes</p>
</blockquote>
<p>5.将/root/solr/solr-6.6.0/server/resources/log4j.properties文件复制其中。</p>
<blockquote>
<p>cp -r /root/solr/solr-6.6.0/server/resources/log4j.properties solr/tomcat-solr-8080/webapps/solr/WEB-INF/classes/  </p>
</blockquote>
<p>6.新建文件夹solrhome，创建core使用</p>
<blockquote>
<p>mkdir /root/solr/solrhome8080</p>
</blockquote>
<p>7.复制solr/solr-6.6.0/server/solr/*所有文件到tomcat/solrhome目录，用到创建solr的core时使用。</p>
<blockquote>
<p> cp -r solr/solr-6.6.0/server/solr/* solr/solrhome8080/</p>
</blockquote>
<h2 id="配置solr"><a href="#配置solr" class="headerlink" title="配置solr"></a>配置solr</h2><p>编辑web.xml文件，并配置solrhome路径</p>
<blockquote>
<p>vim solr/tomcat-solr-8080/webapps/solr/WEB-INF/web.xml</p>
</blockquote>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;env-entry&gt;</div><div class="line">    &lt;env-entry-name&gt;solr/home&lt;/env-entry-name&gt;</div><div class="line">    &lt;env-entry-value&gt;/root/solr/solrhome8080&lt;/env-entry-value&gt;</div><div class="line">    &lt;env-entry-type&gt;java.lang.String&lt;/env-entry-type&gt;</div><div class="line">&lt;/env-entry&gt;</div></pre></td></tr></table></figure>
<p>配置访问权限,找到如下内容，并注释掉</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!--</div><div class="line">  &lt;security-constraint&gt;</div><div class="line">    &lt;web-resource-collection&gt;</div><div class="line">      &lt;web-resource-name&gt;Disable TRACE&lt;/web-resource-name&gt;</div><div class="line">      &lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class="line">      &lt;http-method&gt;TRACE&lt;/http-method&gt;</div><div class="line">    &lt;/web-resource-collection&gt;</div><div class="line">    &lt;auth-constraint/&gt;</div><div class="line">  &lt;/security-constraint&gt;</div><div class="line">  &lt;security-constraint&gt;</div><div class="line">    &lt;web-resource-collection&gt;</div><div class="line">      &lt;web-resource-name&gt;Enable everything but TRACE&lt;/web-resource-name&gt;</div><div class="line">      &lt;url-pattern&gt;/&lt;/url-pattern&gt;</div><div class="line">      &lt;http-method-omission&gt;TRACE&lt;/http-method-omission&gt;</div><div class="line">    &lt;/web-resource-collection&gt;</div><div class="line">  &lt;/security-constraint&gt;</div><div class="line">  --&gt;</div></pre></td></tr></table></figure>
<h2 id="创建core-collection1"><a href="#创建core-collection1" class="headerlink" title="创建core-collection1"></a>创建core-collection1</h2><p>1.新建文件夹</p>
<blockquote>
<p>mkdir /root/solr/solrhome8080/collection1 <br><br>cp -r solr/solrhome8080/configsets/sample_techproducts_configs/conf solr/solrhome8080/collection1</p>
<h2 id="运行solr"><a href="#运行solr" class="headerlink" title="运行solr"></a>运行solr</h2><p>./root/solr/tomcat-solr-8080/bin/startup.sh &amp; tail -f /root/solr/tomcat-solr-8080/logs/catalina.out</p>
</blockquote>
<p>访问solr服务器 <br><br><img src="/uploads/solr-collection1.png" alt=""> <br><br>效果图 <br><br><img src="/uploads/solr2.png" alt=""></p>
<h2 id="ik分词器配置"><a href="#ik分词器配置" class="headerlink" title="ik分词器配置"></a>ik分词器配置</h2><p>Elasticsearch 内置的分词器对中文不友好，会把中文分成单个字来进行全文检索，不能达到想要的结果,所以需要配置一款智能的中文分词器–ik中文分词器<br>下载地址：<a href="http://download.csdn.net/download/u012806787/9930802" target="_blank" rel="external">点击这里</a></p>
<blockquote>
<p>cd /home/root/data/ <br></p>
</blockquote>
<p>下载完成并上传到/home/root/data/，解压</p>
<blockquote>
<p>yum install -y zip unzip <br><br>unzip ikanalyzer-solr6.6.zip  <br><br>mkdir /home/root/solr/ik<br>mv /home/root/data/ikanalyzer-solr5 /home/root/solr/ik/ <br><br> cd /home/root/solr/ik/<br>cp -r ext.dic stopword.dic IKAnalyzer.cfg.xml solr/tomcat-solr-8080/webapps/solr/WEB-INF/classes/  <br></p>
</blockquote>
<p>修改IKAnalyzer.cfg.xml</p>
<blockquote>
<p> vim solr/tomcat-solr-8080/webapps/solr/WEB-INF/classes/IKAnalyzer.cfg.xml <br></p>
</blockquote>
<p><img src="/uploads/IKanylics.png" alt=""></p>
<p>复制solr-analyzer-ik-5.1.0.jar ik-analyzer-solr5-5.x.jar到solr/tomcat-solr-8080/webapps/solr/WEB-INF/lib/目录下。</p>
<blockquote>
<p>cp ik-analyzer-solr5-5.x.jar solr-analyzer-ik-5.1.0.jar solr/tomcat-solr-8080/webapps/solr/WEB-INF/lib/</p>
</blockquote>
<p>在 solr/solrhome8080/isolr/conf/managed-schema文件前增加如下配置</p>
<blockquote>
<p>vim solr/solrhome8080/isolr/conf/managed-schema </p>
</blockquote>
<p><img src="/uploads/ik.png" alt=""></p>
<p>重启solr服务器</p>
<blockquote>
<p>./solr/tomcat-solr-8080/bin/shutdown.sh<br> ./solr/tomcat-solr-8080/bin/startup.sh &amp; tail -f solr/tomcat-solr-8080/logs/catalina.out </p>
</blockquote>
<p>查看效果</p>
<p><img src="/uploads/solr3.png" alt=""></p>
<p><img src="/uploads/solr4.png" alt=""></p>
]]></content>
      
        <categories>
            
            <category> linux自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos7,solr,solr6,ik,分词器 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学之3-tomcat环境配置]]></title>
      <url>/2017/08/11/centos7%E8%87%AA%E5%AD%A6%E4%B9%8B3-tomcat%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>centos7配置tomcat服务器<br><a id="more"></a></p>
<h3 id="下载tomcat"><a href="#下载tomcat" class="headerlink" title="下载tomcat"></a>下载tomcat</h3><blockquote>
<p>cd /home/robot/Downloads</p>
</blockquote>
<p>打开浏览器进入tamcat官网查看tamcat下载地址：chrome下鼠标右健 edit as html 查看地址 并且复制出来</p>
<blockquote>
<p>wget <a href="http://mirrors.noc.im/apache/tomcat/tomcat-9/v9.0.0.M4/bin/apache-tomcat-9.0.0.M4.tar.gz" target="_blank" rel="external">http://mirrors.noc.im/apache/tomcat/tomcat-9/v9.0.0.M4/bin/apache-tomcat-9.0.0.M4.tar.gz</a>  </p>
</blockquote>
<p>没有wget命令</p>
<blockquote>
<p>yum -y install wget</p>
</blockquote>
<h3 id="安装tomcat"><a href="#安装tomcat" class="headerlink" title="安装tomcat"></a>安装tomcat</h3><blockquote>
<p>mv  /home/robot/Downloads/*.tar.gz /home/robot/devTools/tomcat<br>cd /home/robot/devTools/tomcat/    </p>
</blockquote>
<p>执行命令    </p>
<blockquote>
<p>tar -zxvf *.tar.gz</p>
</blockquote>
<h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><blockquote>
<p>./home/robot/devTools/tomcat/tomcat文件夹名/startup.sh &amp; tail -f /home/robot/devTools/tomcat/tomcat文件夹名/logs/catalina.out</p>
</blockquote>
<h3 id="开放防火墙端口号"><a href="#开放防火墙端口号" class="headerlink" title="开放防火墙端口号"></a>开放防火墙端口号</h3><blockquote>
<p>vim /etc/systemfig/iptables    </p>
</blockquote>
<p>增加一行    </p>
<blockquote>
<p>-A RH-Firewall-1-INPUT -m state –state NEW -m tcp -p tcp –dport 8080 -j ACCEPT</p>
</blockquote>
<p>或者关闭防火墙 </p>
<blockquote>
<p>systemctl stop firewalld.service</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>firewall-cmd –zone=public –add-port=8080/tcp –permanent <br><br>firewall-cmd –reload</p>
<h3 id="检验tomcat安装成功与否"><a href="#检验tomcat安装成功与否" class="headerlink" title="检验tomcat安装成功与否"></a>检验tomcat安装成功与否</h3><p>浏览器输入地址：<a href="http://ip:8080" target="_blank" rel="external">http://ip:8080</a>    看到tomcat界面即成功</p>
<h3 id="停止tomcat"><a href="#停止tomcat" class="headerlink" title="停止tomcat"></a>停止tomcat</h3><p>./home/robot/devTools/tomcat/tomcat文件夹名/shutdown.sh &amp; tail -f /home/robot/devTools/tomcat/tomcat文件夹名/logs/catalina.out</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> linux,centos7,tomcat </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[centos7自学之2-jdk配置]]></title>
      <url>/2017/08/11/centos7%E8%87%AA%E5%AD%A6%E4%B9%8B2-jdk%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>本章讲解在centos服务器上部署java开发环境之jdk安装，分rpm安装和tar.gz安装<br><a id="more"></a></p>
<h2 id="安装之前"><a href="#安装之前" class="headerlink" title="安装之前"></a>安装之前</h2><h3 id="安装环境检查"><a href="#安装环境检查" class="headerlink" title="安装环境检查"></a>安装环境检查</h3><h4 id="查看当前系统jdk"><a href="#查看当前系统jdk" class="headerlink" title="查看当前系统jdk"></a>查看当前系统jdk</h4><blockquote>
<p>java -version</p>
</blockquote>
<p><img src="http://img.blog.csdn.net/20170811122318682?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwNjc4Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="进一步查看jdk信息"><a href="#进一步查看jdk信息" class="headerlink" title="进一步查看jdk信息"></a>进一步查看jdk信息</h4><blockquote>
<p>rpm -qa | grep java  <br><br>rpm -qa | grep jdk   <br><br>rpm -qa | grep -E ‘^open[jre|jdk]|j[re|dk]</p>
</blockquote>
<h4 id="卸载jdk"><a href="#卸载jdk" class="headerlink" title="卸载jdk"></a>卸载jdk</h4><blockquote>
<p>rpm -e –nodeps + 上面查出来的openjdk相关</p>
</blockquote>
<h2 id="rpm安装"><a href="#rpm安装" class="headerlink" title="rpm安装"></a>rpm安装</h2><h3 id="下载rpm安装文件"><a href="#下载rpm安装文件" class="headerlink" title="下载rpm安装文件"></a>下载rpm安装文件</h3><p>进oracle官网下载适用于自己版本的*.rpm格式的jdk<br>wget方式下载，进入保存下载文件的路径</p>
<blockquote>
<p>cd /home/robot/data <br><br>wget <a href="http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.rpm" target="_blank" rel="external">http://download.oracle.com/otn-pub/java/jdk/8u144-b01/090f390dda5b47b9b721c7dfaa008135/jdk-8u144-linux-x64.rpm</a></p>
</blockquote>
<p>如果没有wget命令，执行 <br></p>
<blockquote>
<p>yun install wget</p>
<h3 id="rpm命令安装"><a href="#rpm命令安装" class="headerlink" title="rpm命令安装"></a>rpm命令安装</h3><p>rpm -ivh *.rpm</p>
</blockquote>
<h3 id="验证安装，终端输入-java-或者-javac-或者-java-version"><a href="#验证安装，终端输入-java-或者-javac-或者-java-version" class="headerlink" title="验证安装，终端输入 java  或者 javac 或者 java -version"></a>验证安装，终端输入 java  或者 javac 或者 java -version</h3><blockquote>
<p>java</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>javac</p>
</blockquote>
<p>或者</p>
<blockquote>
<p>java -version</p>
</blockquote>
<p>出现下图情况即为安装成功  <br><br><img src="http://img.blog.csdn.net/20170826203358873?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwNjc4Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"> <br><br>注意：此种安装方式不需要配置环境变量，比较快捷，方便！此方式也是我目前使用的方式</p>
<h2 id="tar-gz解压安装"><a href="#tar-gz解压安装" class="headerlink" title="tar.gz解压安装"></a>tar.gz解压安装</h2><p>解压jdk</p>
<blockquote>
<p>tar -xzvf  jdk<em>.tar.gz<br>mv jdk</em> /usr/local/</p>
</blockquote>
<p>编辑/etc/profile</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export JAVA_HOME=/usr/local/jdk1.8.0_144</div><div class="line">export PATH=$JAVA_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<p>使更改生效</p>
<blockquote>
<p>source /etc/profile</p>
</blockquote>
]]></content>
      
        <categories>
            
            <category> linux自学 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> centos7,jdk </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中小型开发架构实战之3 jdbc-mariadb]]></title>
      <url>/2017/08/10/%E4%B8%AD%E5%B0%8F%E5%9E%8B%E5%BC%80%E5%8F%91%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98%E4%B9%8B3%20jdbc-mariadb/</url>
      <content type="html"><![CDATA[<p>jdk8+jdbc连接数据库<br><a id="more"></a></p>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><h4 id="前言-什么是JDBC"><a href="#前言-什么是JDBC" class="headerlink" title="前言 什么是JDBC"></a>前言 什么是JDBC</h4><p>  维基百科的简介：<br>　　Java 数据库连接，（Java Database Connectivity，简称JDBC）是Java语言中用来规范客户端程序如何来访问数据库的应用程序接口，提供了诸如查询和更新数据库中数据的方法。JDBC也是Sun Microsystems的商标。它JDBC是面向关系型数据库的。<br>　　简单地说，就是用于执行SQL语句的一类Java API，通过JDBC使得我们可以直接使用Java编程来对关系数据库进行操作。通过封装，可以使开发人员使用纯Java API完成SQL的执行。</p>
<h4 id="（一）准备工作"><a href="#（一）准备工作" class="headerlink" title="（一）准备工作"></a>（一）准备工作</h4><h5 id="1-创建数据库"><a href="#1-创建数据库" class="headerlink" title="1.创建数据库"></a>1.创建数据库</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">DROP TABLE IF EXISTS `t_goods`;</div><div class="line">CREATE TABLE `t_goods` (</div><div class="line">  `id` bigint(20) NOT NULL COMMENT '主键',</div><div class="line">  `name` varchar(20) NOT NULL DEFAULT '' COMMENT '商品名称',</div><div class="line">  `price` double(10,0) DEFAULT NULL COMMENT '价钱',</div><div class="line">  `number` int(11) DEFAULT NULL COMMENT '数量',</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line">DROP TABLE IF EXISTS `t_r_goods_salesperson`;</div><div class="line">CREATE TABLE `t_r_goods_salesperson` (</div><div class="line">  `id` bigint(20) NOT NULL COMMENT '主键',</div><div class="line">  `goods_id` bigint(20) NOT NULL COMMENT '商品表外键',</div><div class="line">  `salesperosn_id` bigint(20) NOT NULL COMMENT '销售员外键',</div><div class="line">  `number` int(10) NOT NULL COMMENT '销售量',</div><div class="line">  `sales_time` datetime NOT NULL COMMENT '商品卖出时间',</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line">DROP TABLE IF EXISTS `t_salesperson`;</div><div class="line">CREATE TABLE `t_salesperson` (</div><div class="line">  `id` bigint(20) NOT NULL COMMENT '主键',</div><div class="line">  `name` varchar(4) DEFAULT NULL COMMENT '销售员姓名',</div><div class="line">  `password` varchar(30) DEFAULT NULL COMMENT '销售员密码',</div><div class="line">  PRIMARY KEY (`id`)</div><div class="line">) ENGINE=InnoDB DEFAULT CHARSET=utf8;</div><div class="line">```	</div><div class="line">#####  2.导包</div><div class="line">![enter description here][1]</div><div class="line">##### 3.实体</div><div class="line">```java</div><div class="line">public class Goods &#123;</div><div class="line">   	private Integer id ;</div><div class="line">   	private String name ;</div><div class="line">   	private Double price ;</div><div class="line">   	private Integer number ;</div><div class="line">   	....</div><div class="line">省略构造器，setter，getter</div><div class="line">&#125;</div><div class="line">public class GoodsSalesperson &#123;</div><div class="line">    private Integer id ;</div><div class="line">    private Integer goodsId ;</div><div class="line">    private Integer salespersonId ;</div><div class="line">    private Integer number ;</div><div class="line">    private Date salesTime ;</div><div class="line">	....</div><div class="line">	省略构造器，setter，getter</div><div class="line">&#125;</div><div class="line">public class Salesperson &#123;</div><div class="line">    private Integer id ;</div><div class="line">    private String name ;</div><div class="line">    private String password ;</div><div class="line">    ....</div><div class="line">	省略构造器，setter，getter</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="4-建立连接"><a href="#4-建立连接" class="headerlink" title="4.建立连接"></a>4.建立连接</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtils</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnetction</span><span class="params">()</span> </span>&#123;</div><div class="line">        Connection conn = <span class="keyword">null</span>;</div><div class="line">        String user   = <span class="string">"root"</span>;</div><div class="line">        String passwd = <span class="string">"htbuy@2016"</span>;</div><div class="line">        String url = <span class="string">"jdbc:mariadb://192.168.6.101:3306/test_shopping"</span>;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//Class.forName("oracle.jdbc.driver.OracleDriver");</span></div><div class="line">            Class.forName(<span class="string">"org.mariadb.jdbc.Driver"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            conn = DriverManager.getConnection(url,user,passwd);</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> conn;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(PreparedStatement pstmt, Connection conn)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) &#123;</div><div class="line">                pstmt.close();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</div><div class="line">            e1.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">                conn.close();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">closeResource</span><span class="params">(PreparedStatement pstmt, ResultSet rs, Connection conn)</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (pstmt != <span class="keyword">null</span>) &#123;</div><div class="line">                pstmt.close();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</div><div class="line">            e1.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (rs != <span class="keyword">null</span> ) &#123;</div><div class="line">                rs.close();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e1) &#123;</div><div class="line">            e1.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">if</span> (conn != <span class="keyword">null</span>) &#123;</div><div class="line">                conn.close();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="5-insert"><a href="#5-insert" class="headerlink" title="5.insert"></a>5.insert</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">  * <span class="doctag">@description</span> &lt;p&gt;添加商品到数据库t_goods表&lt;/p&gt;</div><div class="line">  * <span class="doctag">@author</span> heshiyuan</div><div class="line">  * <span class="doctag">@date</span> 2017/7/20 11:39</div><div class="line">  * <span class="doctag">@param</span> goods 商品对象</div><div class="line">  */</div><div class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">addGoods</span><span class="params">(Goods goods)</span> </span>&#123;</div><div class="line">     <span class="keyword">boolean</span> bool = <span class="keyword">false</span>;</div><div class="line">     conn = DBUtils.getConnetction();</div><div class="line">     String sql = <span class="string">"INSERT INTO t_GOODS(id,NAME,PRICE,number) VALUES(?,?,?,?)"</span>;</div><div class="line">     <span class="keyword">try</span> &#123;</div><div class="line">         pstmt = conn.prepareStatement(sql);</div><div class="line">         pstmt.setInt(<span class="number">1</span>, goods.getId());</div><div class="line">         pstmt.setString(<span class="number">2</span>, goods.getName());</div><div class="line">         pstmt.setDouble(<span class="number">3</span>, goods.getPrice());</div><div class="line">         pstmt.setInt(<span class="number">4</span>, goods.getNumber());</div><div class="line">         <span class="keyword">int</span> rs = pstmt.executeUpdate();</div><div class="line">         <span class="keyword">if</span> (rs &gt; <span class="number">0</span>) &#123;</div><div class="line">             bool = <span class="keyword">true</span>;</div><div class="line">         &#125;</div><div class="line">     &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">         e.printStackTrace();</div><div class="line">     &#125; <span class="keyword">finally</span> &#123;</div><div class="line">         DBUtils.closeResource(pstmt, conn);</div><div class="line">     &#125;</div><div class="line">     <span class="keyword">return</span> bool;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h5 id="6-update"><a href="#6-update" class="headerlink" title="6.update"></a>6.update</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * <span class="doctag">@description</span> &lt;p&gt;更改商品信息到数据库t_goods表&lt;/p&gt;</div><div class="line">    * <span class="doctag">@author</span> heshiyuan</div><div class="line">    * <span class="doctag">@param</span> key   选择要更改商品信息</div><div class="line">    * <span class="doctag">@param</span> goods 商品对象</div><div class="line">    * <span class="doctag">@date</span> 2017/7/20 11:39</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">updateGoods</span><span class="params">(<span class="keyword">int</span> key, Goods goods)</span> </span>&#123;</div><div class="line">       <span class="keyword">boolean</span> bool = <span class="keyword">false</span>;</div><div class="line">       conn = DBUtils.getConnetction();</div><div class="line">       <span class="keyword">switch</span> (key) &#123;</div><div class="line">           <span class="keyword">case</span> <span class="number">1</span>:        <span class="comment">//	key=1,更改商品名称</span></div><div class="line">               String sqlName = <span class="string">"UPDATE t_goods SET NAME=? WHERE ID=?"</span>;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   pstmt = conn.prepareStatement(sqlName);</div><div class="line">                   pstmt.setString(<span class="number">1</span>, goods.getName());</div><div class="line">                   pstmt.setLong(<span class="number">2</span>, goods.getId());</div><div class="line">                   <span class="keyword">int</span> rs = pstmt.executeUpdate();</div><div class="line">                   <span class="keyword">if</span> (rs &gt; <span class="number">0</span>) &#123;</div><div class="line">                       bool = <span class="keyword">true</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">               &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                   DBUtils.closeResource(pstmt, conn);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="number">2</span>:        <span class="comment">//	key=2,更改商品价格</span></div><div class="line">               String sqlPrice = <span class="string">"UPDATE t_goods SET PRICE=? WHERE ID=?"</span>;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   conn = DBUtils.getConnetction();</div><div class="line">                   pstmt = conn.prepareStatement(sqlPrice);</div><div class="line">                   pstmt.setDouble(<span class="number">1</span>, goods.getPrice());</div><div class="line">                   pstmt.setLong(<span class="number">2</span>, goods.getId());</div><div class="line">                   <span class="keyword">int</span> rs = pstmt.executeUpdate();</div><div class="line">                   <span class="keyword">if</span> (rs &gt; <span class="number">0</span>) &#123;</div><div class="line">                       bool = <span class="keyword">true</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">               &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                   DBUtils.closeResource(pstmt, conn);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">case</span> <span class="number">3</span>:        <span class="comment">//	key=3,更改商品数量</span></div><div class="line">               String sqlNum = <span class="string">"UPDATE t_goods SET number=? WHERE ID=?"</span>;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   conn = DBUtils.getConnetction();</div><div class="line">                   pstmt = conn.prepareStatement(sqlNum);</div><div class="line">                   pstmt.setInt(<span class="number">1</span>, goods.getNumber());</div><div class="line">                   pstmt.setLong(<span class="number">2</span>, goods.getId());</div><div class="line">                   <span class="keyword">int</span> rs = pstmt.executeUpdate();</div><div class="line">                   <span class="keyword">if</span> (rs &gt; <span class="number">0</span>) &#123;</div><div class="line">                       bool = <span class="keyword">true</span>;</div><div class="line">                   &#125;</div><div class="line">               &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">               &#125; <span class="keyword">finally</span> &#123;</div><div class="line">                   DBUtils.closeResource(pstmt, conn);</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">           <span class="keyword">default</span>:</div><div class="line">               <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> bool;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="7-select"><a href="#7-select" class="headerlink" title="7.select"></a>7.select</h5><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span>  List&lt;Map&lt;String,Object&gt;&gt; dailyGsales() &#123;</div><div class="line">       List&lt;Map&lt;String,Object&gt;&gt; returnMapList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       conn = DBUtils.getConnetction();</div><div class="line">       String sql = <span class="string">"SELECT"</span> +</div><div class="line">               <span class="string">" gs.sales_time as salesTime,"</span> +</div><div class="line">               <span class="string">" gs.id as id,"</span> +</div><div class="line">               <span class="string">" g.`name` as goodsName,"</span> +</div><div class="line">               <span class="string">" s.`name` as salesName,"</span> +</div><div class="line">               <span class="string">" g.price as price,"</span> +</div><div class="line">               <span class="string">" gs.number as count,"</span> +</div><div class="line">               <span class="string">" g.price * g.number as total"</span> +</div><div class="line">               <span class="string">" FROM"</span> +</div><div class="line">               <span class="string">" t_r_goods_salesperson gs left join t_salesperson s on gs.salesperosn_id = s.id"</span> +</div><div class="line">               <span class="string">" left join t_goods g on gs.goods_id = g.id"</span> +</div><div class="line">               <span class="string">";"</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           pstmt = conn.prepareStatement(sql);</div><div class="line">           rs = pstmt.executeQuery();</div><div class="line">           <span class="keyword">while</span> (rs.next()) &#123;</div><div class="line">               Map&lt;String,Object&gt; returnMap = <span class="keyword">new</span> HashMap&lt;&gt;() ;</div><div class="line">               returnMap.put(<span class="string">"saleTime"</span>,rs.getTimestamp(<span class="number">1</span>));</div><div class="line">               returnMap.put(<span class="string">"id"</span>,rs.getInt(<span class="number">2</span>));</div><div class="line">               returnMap.put(<span class="string">"goodsName"</span>,rs.getString(<span class="number">3</span>));</div><div class="line">               returnMap.put(<span class="string">"salesName"</span>,rs.getString(<span class="number">4</span>));</div><div class="line">               returnMap.put(<span class="string">"price"</span>,rs.getDouble(<span class="number">5</span>));</div><div class="line">               returnMap.put(<span class="string">"count"</span>,rs.getInt(<span class="number">6</span>));</div><div class="line">               returnMap.put(<span class="string">"total"</span>,rs.getDouble(<span class="number">7</span>));</div><div class="line">               returnMapList.add(returnMap) ;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           DBUtils.closeResource(pstmt, rs, conn);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> returnMapList;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</code></pre><h5 id="8-delete"><a href="#8-delete" class="headerlink" title="8.delete"></a>8.delete</h5><pre><code><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * <span class="doctag">@description</span> &lt;p&gt;从数据库goods表中-刪除商品&lt;/p&gt;</div><div class="line">    * <span class="doctag">@author</span> heshiyuan</div><div class="line">    * <span class="doctag">@date</span> 2017/7/20 11:38</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteGoods</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</div><div class="line">       <span class="keyword">boolean</span> bool = <span class="keyword">false</span>;</div><div class="line">       String sql = <span class="string">"DELETE FROM t_GOODS WHERE ID=?"</span>;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           conn = DBUtils.getConnetction();</div><div class="line">           pstmt = conn.prepareStatement(sql);</div><div class="line">           pstmt.setLong(<span class="number">1</span>,id);</div><div class="line">           <span class="keyword">int</span> rs = pstmt.executeUpdate();</div><div class="line">           <span class="keyword">if</span> (rs &gt; <span class="number">0</span>) &#123;</div><div class="line">               bool = <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line">       &#125; <span class="keyword">catch</span> (SQLException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125; <span class="keyword">finally</span> &#123;</div><div class="line">           DBUtils.closeResource(pstmt, conn);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> bool;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
</code></pre><h4 id="（二）项目演示"><a href="#（二）项目演示" class="headerlink" title="（二）项目演示"></a>（二）项目演示</h4><p>1.商城主页面<br><img src="/uploads/main.png" alt="商城主页面"><br>2.商品列表<br><img src="/uploads/goodslist.png" alt="商品列表"><br>3.售出列表<br><img src="/uploads/salesList.png" alt="售出列表"></p>
<h4 id="（三）篇后感"><a href="#（三）篇后感" class="headerlink" title="（三）篇后感"></a>（三）篇后感</h4><p>目前的项目功能并不丰富，简单的jdbc增删改查，此项目会继续维护，<br>项目源码托管在GitHub：<a href="https://github.com/shiyuan2he/framework.git" target="_blank" rel="external">https://github.com/shiyuan2he/framework.git</a><br>后续会增加jdbc增删改查的封装（思路是java 反射），添加jdbc事务支持，aop切面拦截<br>持续更新中，敬请期待</p>
]]></content>
      
        <categories>
            
            <category> 中小型开发架构实践 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk8,jdbc,mariadb </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谈钱增进感情之1 人生定位]]></title>
      <url>/2017/07/28/%E8%B0%88%E9%92%B1%E5%A2%9E%E8%BF%9B%E6%84%9F%E6%83%85%E4%B9%8B1%20%E4%BA%BA%E7%94%9F%E5%AE%9A%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>  瓜瓜之林，人人之森<br><a id="more"></a></p>
<h2 id="乏日子"><a href="#乏日子" class="headerlink" title="乏日子"></a>乏日子</h2><p><img src="/uploads/生活.jpeg" alt="生活"><br>今年自换工作以来生活浑浑噩噩，其实也不知道为什么会换工作，没有以前累但充满能量的状态，<br>14年15年买了1000块钱的书，送人的送人，丢的丢绝大部分没有看过，纸质书没翻几本，it技术没有多少研究，当时心血来潮搞起来的立志一周写一篇文章的订阅号也没有更新文章。工作中做好本职工作，得空看一看关心的动漫，按照加班的点儿准时下班，到家洗洗打会游戏或看看lol比赛，睡觉，日复一日，如果不是每月按时领工资，真的感觉时间像静止了一样感觉不到流逝。想法没有实现，投资没有赚钱，生活没有改变，整个北京城就像那锅温水，而我是一只蛙。</p>
<h2 id="泛工作"><a href="#泛工作" class="headerlink" title="泛工作"></a>泛工作</h2><p><img src="/uploads/工作.jpg" alt="工作"><br>在恒天，其实还算稳定，我所在的技术部比较轻松，每天边熟悉业务边做一些小需求，时常跟恒生的人扯扯淡，业务不明白的问一问老人，产品能够搞定。一般技术问题能够自己搞定，二般技术问题网上搜索能够搞定，三般技术问题问架构师能够搞定，日常写邮件，发周报，写月度绩效，季度考核。搞好同事关系，不二不犯大错，职场就那么回事。</p>
<h2 id="思财富"><a href="#思财富" class="headerlink" title="思财富"></a>思财富</h2><p><img src="/uploads/财富.jpg" alt="财富"><br>之前一直想过靠合适的买卖股票致富，但16年初碰上股灾大赔3800让我对股市忌惮。近两年定投基金也没有明显的回报，反而现在觉得买定期的p2p反而是不错的选择。90%定期p2p+10%基金定投，不图发财只为存钱。</p>
<h2 id="渴求知"><a href="#渴求知" class="headerlink" title="渴求知"></a>渴求知</h2><p><img src="/uploads/读书.jpg" alt="读书"><br>记得以前吃饭拉屎都会带上kindle，一有空隙就看会儿书，那时候是真的能看进去，有收获，三天就能看一本书。现在地铁上打开手机刷微博看朋友圈追修真小说。人穷多读书，增加谈资。</p>
<h2 id="梦人生"><a href="#梦人生" class="headerlink" title="梦人生"></a>梦人生</h2><p><img src="/uploads/梦想.jpg" alt="梦想"><br>大学四年，工作三年一共七年时间。<br><br>从跟爸妈要0.7k/月到薪资19k/月,从计算机小白到成为一名能够独立写商业网站的优秀程序员。<br>从对这个世界茫然到了解自己，认识身边接触的小社会的社会中青年。<br>从依赖家庭依赖社会资源到利用社会资源创造财富，懂点投资之道，渴望也极可能做点生意的创业者。<br>梦没熄灭过，作为一个感性者，情怀总能打动我自己，打动人心，却很难打动现实</p>
<h2 id="盼未来"><a href="#盼未来" class="headerlink" title="盼未来"></a>盼未来</h2><p>作为一个it技术工作者还是很有前途的，随着经验越来越丰富，精力越来越多机会还是很多的。<br>有合适的机会就进bat那样的大公司，拥有技术+人生经验也能适应大公司的企业文化。<br>倘若不成挑一个10～20人的初创公司做一个感兴趣的项目，成长为一个项目经理或者架构师，尽全力把项目做成功。<br>倘若还走不通此路，寻找志趣相投的商业合伙人去创业，使自己成为一个“稳中求胜”的人。<br>身边最近赚钱的人和事非常多，小到小面馆面包馆大到互联网创业工资某轮融资成功，不止关注此类事件，多想多打听别人的成功之道。<br>无论走哪条路，技术都是最根本的，是铁饭碗的保障，不能轻易放弃技术。</p>
<h2 id="识人心"><a href="#识人心" class="headerlink" title="识人心"></a>识人心</h2><p>自称“感性，拥有情怀，为别人而活”，这都建立在自己是有钱人的基础之上，如果穷，我也是一个自私的人。</p>
<h2 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h2><p>无论行与不行，幸或不幸，都不能丢掉的是亲人和朋友。这种无形的财富才是最稳定稳固的。</p>
<p>blog:<a href="https://shiyuan2he.github.io/" target="_blank" rel="external">https://shiyuan2he.github.io/</a><br>csdn:<a href="http://write.blog.csdn.net/postlist" target="_blank" rel="external">http://write.blog.csdn.net/postlist</a><br>github:<a href="https://github.com/shiyuan2he" target="_blank" rel="external">https://github.com/shiyuan2he</a><br>订阅号：远观钱途<br>新浪微博：远观钱途</p>
]]></content>
      
        <categories>
            
            <category> 谈钱增进感情 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> 投资,理财 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[谈钱增进感情之2 执行力很差劲！我不只说我自己，我说的是朋友圈的各位]]></title>
      <url>/2017/05/26/%E8%B0%88%E9%92%B1%E5%A2%9E%E8%BF%9B%E6%84%9F%E6%83%85%E4%B9%8B2%20%E6%89%A7%E8%A1%8C%E5%8A%9B%E5%BE%88%E5%B7%AE%E5%8A%B2%EF%BC%81%E6%88%91%E4%B8%8D%E5%8F%AA%E8%AF%B4%E6%88%91%E8%87%AA%E5%B7%B1%EF%BC%8C%E6%88%91%E8%AF%B4%E7%9A%84%E6%98%AF%E6%9C%8B%E5%8F%8B%E5%9C%88%E7%9A%84%E5%90%84%E4%BD%8D/</url>
      <content type="html"><![CDATA[<p>   人生时间有限，应该把更多的时间利用在自己喜欢的工作娱乐上，将精力投入到更有意义的项目上。<br>   <a id="more"></a><br>   高中大学看过8年玄幻小说最后也没写下一篇读后感或者半本小说。<br>   2014～2015买过一千多块钱的it书籍，几乎没有一本能从头看到结尾。<br>   知乎，csdn，open-open，github，微博，各种论坛常出没也没有成为大v。<br>   。。。<br>   执行力太差劲。确实对自己太失望了，对不起向偶像学习的人，更对不起”向我学习的人“。<br>   人生时间有限，应该把更多的时间利用在自己喜欢的工作娱乐上，将精力投入到更有意义的项目上。<br>   百度百科对执行力的描述当中的一句话是<br>   “执行力就是在既定的战略和愿景的前提下 ，组织对内外部可利用的资源进行综合协调<br>     制定出可行性的战略，并通过有效的执行措施从而最终实现组织目标、达成组织愿景的一种力量。”<br>   因为我们都不是咸鱼，所以我们每个人都有梦想。但是绝大多数的人都是空有梦想不去实现！为什么不去做y，<br>我想到的答案是没有成就感。大梦想有大成就感，小目标有小成就感。挣一个亿的成就感与挣一万块的成就感在<br>精神层面的差距绝对没有在数量层面的差距大。<br>   因此，提出以下解决办法：<br>   1.树立明确的梦想<br>   是挣一亿人民币还是当官。挣钱是为了自己，家人还是为了社会。。当官是为了名声还是为了挣钱或者二者都有。<br>   明确的梦想：40岁的时候，我是身价过一亿的富豪。30岁的时候我是一名500强公司的高管，年薪100万。。。<br>   不明确的梦想：40岁的时候我要财务自由，30岁的时候我的工资够还银行贷款。。。<br>   2.量化梦想<br>   梦想本身是主观性的，只有经过拆解，量化才能成为客观的。<br>   40岁挣一个亿，假如还有十年时间，平均每年挣一千万，考虑到挣钱能力随着时间成几何增长，第一年30万，<br>第二年50万，第三年100万，第四年200万，，，第十年挣够一亿。<br>   3.寻找方法<br>   第一年挣30万。<br>   a.包装自己，靠脸或者靠技术找一份月薪1万的稳定工作。<br>   b.整理手头上的流动资金，买p2p,定投基金，选择一只熟悉的上市公司长期持有公司股票。。<br>   c.和朋友一起或者寻找值得跟随的合作伙伴搞一个“鲍师傅糕点”“黄焖鸡米饭”<br>   d.如果自己有其他方面的擅长。字好，画好，吉他好都可以挣点外快。<br>   e.最后还是离三十万有点远，抢银行也是个不错的法子。<br>   4.执行<br>   计划已经订好了，按照步骤执行，鼓足干劲干下去。控制力差的可以公开自己的目标让身边的朋友监督。<br>   定闹钟，每天闹钟响起，“老板，今天要挣1000块钱才能一年挣30万”<br>   每天完成一件事给自己一个鼓励，给自己一个微笑，老婆给自己一个吻。<br>   记住，完成目标，不择“手段”。<br>   5.总结<br>   每个一个月都要对自己的行动做总结，回头看看自己的目标，实现过程，完成度。<br>   如果完成了，优化提升执行力度，没有完成反思方法，重构计划。切莫自欺欺人。</p>
<p>   篇后感言：<br>   30万确实是很大的挑战，但根据个人情况不一，其数字可以是20.1705万，11.1111万。。</p>
]]></content>
      
        
        <tags>
            
            <tag> 执行力 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[中小型开发架构实战之1 springboot演进]]></title>
      <url>/2017/05/24/%E4%B8%AD%E5%B0%8F%E5%9E%8B%E5%BC%80%E5%8F%91%E6%9E%B6%E6%9E%84%E5%AE%9E%E6%88%98%E4%B9%8B1%20springboot%E6%BC%94%E8%BF%9B/</url>
      <content type="html"><![CDATA[<p>springboot被称为是JavaEE开发颠覆者，一改传统JavaEE web项目开发笨重的缺点，springboot提供<br>一系列的注解能够快速搭建行之有效的web应用，甚至只需要简单的配置就能够速成一个简单的web应用。<br><a id="more"></a><br>springboot被称为是JavaEE开发颠覆者，一改传统JavaEE web项目开发笨重的缺点，springboot提供<br>一系列的注解能够快速搭建行之有效的web应用，甚至只需要简单的配置就能够速成一个简单的web应用。<br>也正是这些特点，springboot迅速被市场上大小商业公司启用，也就有了我们学习springboot的必要性。<br>    springboot特点：<br>      1.创建独立的spring应用<br>      2.潜入的tomcat，无需部署war文件<br>      3.大大简化maven配置<br>      4.提供准生产型产品，如项目指标，项目健康检查，项目监控，项目部署等工具<br>      5.没有xml文件<br>      6.自动约定配置spring<br>    springboot项目的搭建过程在后续系列补充上，前期先架构一下项目<br>    <a href="/uploads/springboot01.png">jiagou</a></p>
]]></content>
      
        
        <tags>
            
            <tag> springboot,spring,架构 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[maven实战之1 maven安装及环境变量配置]]></title>
      <url>/2017/04/27/maven%E5%AE%9E%E6%88%98%E4%B9%8B1%20maven%E5%AE%89%E8%A3%85%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<pre><code>越来越多的公司启用maven管理公司商业项目，所以maven的学习势在必行。
</code></pre><a id="more"></a>
<p>Maven项目对象模型(POM)，可以通过一小段描述信息来管理项目的构建，报告和文档的软件项目管理工具.<br>Maven 除了以程序构建能力为特色之外，还提供高级项目管理工具。由于 Maven 的缺省构建规则有较高的<br>可重用性，所以常常用两三行 Maven 构建脚本就可以构建简单的项目。由于 Maven 的面向项目的方法，<br>许多 Apache Jakarta 项目发文时使用 Maven，而且公司项目采用 Maven 的比例在持续增长。</p>
<p>本篇介绍macbookpro下安装及配置maven环境变量。</p>
<ol>
<li><p>下载maven（<a href="https://maven.apache.org/download.cgi），并解压到某一个目录" target="_blank" rel="external">https://maven.apache.org/download.cgi），并解压到某一个目录</a><br>如:/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9</p>
</li>
<li><p>打开iterm或者terminal，输入以下命令：</p>
<pre><code>vim ~/.bash_profile
</code></pre></li>
<li><p>添加以下几行代码，之后保存并推出:wq</p>
<pre><code>MAVEN_HOME=/Users/heshiyuan/data/devTools/maven/apache-maven-3.3.9
PATH=$MAVEN_HOME/bin:$PATH
export MAVEN_HOME
export PATH
</code></pre></li>
<li>输入以下命令使.bash_profile生效<pre><code>source ~/.bash_profile
</code></pre></li>
<li>输入mvn -version查看是否成功</li>
<li><p>如果未安装成功，检查是否先设置了java环境变量</p>
<pre><code>JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_92.jdk/Contents/Home
PATH=$JAVA_HOME/bin:$PATH
export JAVA_HOME
export PATH
</code></pre><p> 如果觉得我的文章对您有用，请随意打赏。您的支持将鼓励我继续创作！</p>
</li>
</ol>
]]></content>
      
        <categories>
            
            <category> maven实战 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> maven,项目管理,mac </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日志框架之2 slf4j+logback实现日志架构]]></title>
      <url>/2017/04/26/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%B9%8B2%20slf4j+logback%E5%AE%9E%E7%8E%B0%E6%97%A5%E5%BF%97%E6%9E%B6%E6%9E%84/</url>
      <content type="html"><![CDATA[<p>如何从缤纷复杂的日志系统世界筛选出适合自己的日志框架以及slf4j+logback的组合美妙之处？此文可能有帮助<br><a id="more"></a></p>
<h2 id="logback介绍"><a href="#logback介绍" class="headerlink" title="logback介绍"></a>logback介绍</h2><p>Logback是由log4j创始人设计的另一个开源日志组件,官方网站： <a href="http://logback.qos.ch。它当前分为下面下个模块：" target="_blank" rel="external">http://logback.qos.ch。它当前分为下面下个模块：</a><br></p>
<ol>
<li>logback-core：其它两个模块的基础模块</li>
<li>logback-classic：它是log4j的一个改良版本，同时它完整实现了slf4j API使你可以很方便地更换成其它日志系统如log4j或JDK14 Logging</li>
<li>logback-access：访问模块与Servlet容器集成提供通过Http来访问日志的功能</li>
</ol>
<h2 id="logback取代log4j的理由"><a href="#logback取代log4j的理由" class="headerlink" title="logback取代log4j的理由"></a>logback取代log4j的理由</h2><ol>
<li>更快的实现：Logback的内核重写了，在一些关键执行路径上性能提升10倍以上。而且logback不仅性能提升了，初始化内存加载也更小了。</li>
<li>Logback-classic非常自然实现了SLF4j：Logback-classic实现了SLF4j。在使用SLF4j中，你都感觉不到logback-classic。而且因为logback-classic非常自然地实现了slf4j ， 所 以切换到log4j或者其他，非常容易，只需要提供成另一个jar包就OK，根本不需要去动那些通过SLF4JAPI实现的代码。</li>
<li>非常充分的文档，官方网站有两百多页的文档。</li>
<li>自动重新加载配置文件，当配置文件修改了，Logback-classic能自动重新加载配置文件。扫描过程快且安全，它并不需要另外创建一个扫描线程。这个技术充分保证了应用程序能跑得很欢在JEE环境里面。</li>
<li>谨慎的模式和非常友好的恢复，在谨慎模式下，多个FileAppender实例跑在多个JVM下，能够安全地写到同一个日志文件。<br>RollingFileAppender会有些限制。<br>Logback的FileAppender和它的子类包括RollingFileAppender能够非常友好地从I/O异常中恢复。</li>
<li>Filters（过滤器）有些时候，需要诊断一个问题，需要打出日志。在log4j，只有降低日志级别，不过这样会打出大量的日志，会影响应用性能。在Logback，你可以继续 保持那个日志级别而除掉某种特殊情况</li>
<li>SiftingAppender（一个非常多功能的Appender）：它可以用来分割日志文件根据任何一个给定的运行参数。如，SiftingAppender能够区别日志事件跟进用户的Session，然后每个用户会有一个日志文件。</li>
<li>自动压缩已经打出来的log：RollingFileAppender在产生新文件的时候，会自动压缩已经打出来的日志文件。压缩是个异步过程，所以甚至对于大的日志文件，在压缩过程中应用不会受任何影响。</li>
<li>堆栈树带有包版本：Logback在打出堆栈树日志时，会带上包的数据。</li>
<li>自动去除旧的日志文件：通过设置TimeBasedRollingPolicy或者SizeAndTimeBasedFNATP的maxHistory属性，你可以控制已经产生日志文件的最大数量。如果设置maxHistory 12，那些log文件超过12个月的都会被自动移除。</li>
</ol>
<h2 id="为什么选择slf4j-logback日志框架"><a href="#为什么选择slf4j-logback日志框架" class="headerlink" title="为什么选择slf4j+logback日志框架"></a>为什么选择slf4j+logback日志框架</h2><p>如果是在一个新的项目中建议使用Slf4j与Logback组合，这样有如下的几个优点。</p>
<ul>
<li>Slf4j实现机制决定Slf4j限制较少，使用范围更广。由于Slf4j在编译期间，静态绑定本地的LOG库使得通用性要比Commons logging要好。</li>
<li>Logback拥有更好的性能。Logback声称：某些关键操作，比如判定是否记录一条日志语句的操作，其性能得到了显著的提高。这个操作在Logback中需要3纳秒，而在Log4J中则需要30纳秒。LogBack创建记录器（logger）的速度也更快：13毫秒，而在Log4J中需要23毫秒。更重要的是，它获取已存在的记录器只需94纳秒，而Log4J需要2234纳秒，时间减少到了1/23。跟JUL相比的性能提高也是显著的。</li>
<li>Commons Logging开销更高 在使Commons Logging时为了减少构建日志信息的开销，通常的做法是：</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(log.isDebugEnabled())&#123;</div><div class="line">	log.debug(<span class="string">"User name： "</span> + user.getName() + <span class="string">" buy goods id ："</span> + good.getId());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Slf4j阵营，你只需这么做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">log.debug(<span class="string">"User name：&#123;&#125; ,buy goods id ：&#123;&#125;"</span>, user.getName(),good.getId());</div></pre></td></tr></table></figure>
<p>也就是说，slf4j把构建日志的开销放在了它确认需要显示这条日志之后，减少内存和cpu的开销，使用占位符号，代码也更为简洁</p>
<ul>
<li>Logback文档免费。Logback的所有文档是全面免费提供的，不象Log4J那样只提供部分免费文档而需要用户去购买付费文档。</li>
</ul>
<h2 id="使用slf4j-logback"><a href="#使用slf4j-logback" class="headerlink" title="使用slf4j+logback"></a>使用slf4j+logback</h2><h3 id="配置文件解析"><a href="#配置文件解析" class="headerlink" title="配置文件解析"></a>配置文件解析</h3><h4 id="根节点configuration"><a href="#根节点configuration" class="headerlink" title="根节点configuration"></a>根节点configuration</h4><p>根节点<configuration>，包含下面三个属性：</configuration></p>
<ol>
<li>scan: 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。</li>
<li>scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。</li>
<li>debug: 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span> <span class="attr">debug</span>=<span class="string">"true"</span>&gt;</span></div><div class="line">	...</div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="子节点contextName"><a href="#子节点contextName" class="headerlink" title="子节点contextName"></a>子节点contextName</h4><p>用来设置上下文名称，每个logger都关联到logger上下文，默认上下文名称为default。但可以使用<contextname>设置成其他名字，用于区分不同应用程序的记录。一旦设置，不能修改。</contextname></p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">contextName</span>&gt;</span>myAppName<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--其他配置省略--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="子节点property"><a href="#子节点property" class="headerlink" title="子节点property"></a>子节点property</h4><p>子节点property：用来定义变量值，它有两个属性name和value，通过<property>定义的值会被插入到logger上下文中，可以使“${}”来使用变量。</property></p>
<ol>
<li>name: 变量的名称</li>
<li>value: 的值时变量定义的值</li>
</ol>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"APP_Name"</span> <span class="attr">value</span>=<span class="string">"myAppName"</span> /&gt;</span></div><div class="line">　　<span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;APP_Name&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></div><div class="line">　　<span class="comment">&lt;!--其他配置省略--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="子节点timestamp"><a href="#子节点timestamp" class="headerlink" title="子节点timestamp"></a>子节点timestamp</h4><p>子节点<timestamp>：获取时间戳字符串，他有两个属性key和datePattern</timestamp></p>
<ol>
<li>key: 标识此<timestamp> 的名字；</timestamp></li>
<li>datePattern: 设置将当前时间（解析配置文件的时间）转换为字符串的模式，遵循java.txt.SimpleDateFormat的格式。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"60 seconds"</span> <span class="attr">debug</span>=<span class="string">"false"</span>&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">timestamp</span> <span class="attr">key</span>=<span class="string">"bySecond"</span> <span class="attr">datePattern</span>=<span class="string">"yyyyMMdd'T'HHmmss"</span>/&gt;</span></div><div class="line">　<span class="tag">&lt;<span class="name">contextName</span>&gt;</span>$&#123;bySecond&#125;<span class="tag">&lt;/<span class="name">contextName</span>&gt;</span></div><div class="line">　<span class="comment">&lt;!-- 其他配置省略--&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="子节点appender"><a href="#子节点appender" class="headerlink" title="子节点appender"></a>子节点appender</h4><p>子节点<appender>：负责写日志的组件，r主要用于指定日志输出的目的地，目的地可以是控制台、文件、远程套接字服务器、 MySQL、PostreSQL、 Oracle和其他数据库、 JMS和远程UNIX Syslog守护进程等。它有两个必要属性name和class。</appender></p>
<ol>
<li>name指定appender名称</li>
<li>class指定appender的全限定名</li>
</ol>
<p>常用的Appder有三个，它们来自同一个超类OutputStreamAppender。需要搭配相应的滚动策略（rolliingPolicy）和触发策略（tripggringPolicy）使用。</p>
<ol>
<li>ConsoleAppender</li>
<li>FileAppende</li>
<li>RollingFileAppderRollingFileAppender</li>
</ol>
<h5 id="ConsoleAppender"><a href="#ConsoleAppender" class="headerlink" title="ConsoleAppender"></a>ConsoleAppender</h5><p>ConsoleAppender 把日志输出到控制台，有以下子节点：</p>
<ol>
<li><encoder>：对日志进行格式化。</encoder></li>
<li><target>：字符串System.out(默认)或者System.err（区别不多说了）</target></li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;configuration&gt;</div><div class="line">　&lt;appender name=&quot;STDOUT&quot; class=&quot;ch.qos.logback.core.ConsoleAppender&quot;&gt;</div><div class="line">    　&lt;encoder&gt;</div><div class="line">    　　&lt;pattern&gt;%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg %n&lt;/pattern&gt;</div><div class="line">    　&lt;/encoder&gt;</div><div class="line">  &lt;/appender&gt;</div><div class="line"></div><div class="line">　&lt;root level=&quot;DEBUG&quot;&gt;</div><div class="line">　    &lt;appender-ref ref=&quot;STDOUT&quot; /&gt;</div><div class="line">　&lt;/root&gt;</div><div class="line">&lt;/configuration&gt;</div></pre></td></tr></table></figure>
<p>上述配置表示把&gt;=DEBUG级别的日志都输出到控制台</p>
<h5 id="FileAppender"><a href="#FileAppender" class="headerlink" title="FileAppender"></a>FileAppender</h5><ol>
<li><file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</file></li>
<li><append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。</append></li>
<li><encoder>：对记录事件进行格式化。</encoder></li>
<li><prudent>：如果是 true，日志会被安全的写入文件，即使其他的FileAppender也在向此文件做写入操作，效率低，默认是 false。</prudent></li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">　  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">file</span>&gt;</span>/home/log/log.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">　　　　　　<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">　　<span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">　　<span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">　　　  <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">　　<span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述配置表示把&gt;=DEBUG级别的日志都输出到/home/log/log.log</p>
<h5 id="RollingFileAppender"><a href="#RollingFileAppender" class="headerlink" title="RollingFileAppender"></a>RollingFileAppender</h5><p>滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。有以下子节点：</p>
<ol>
<li><file>：被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。</file></li>
<li><append>：如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。</append></li>
<li><rollingpolicy>:当发生滚动时，决定RollingFileAppender的行为，涉及文件移动和重命名。</rollingpolicy></li>
</ol>
<h6 id="TimeBasedRollingPolicy"><a href="#TimeBasedRollingPolicy" class="headerlink" title="TimeBasedRollingPolicy"></a>TimeBasedRollingPolicy</h6><p>属性class定义具体的滚动策略类class=”ch.qos.logback.core.rolling.TimeBasedRollingPolicy”： 最常用的滚动策略，它根据时间来制定滚动策略，既负责滚动也负责出发滚动。有以下子节点：
　　　　　　　　</p>
<ol>
<li><filenamepattern>：必要节点，包含文件名及“%d”转换符，“%d”可以包含一个java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。<br>如果直接使用 %d，默认格式是 yyyy-MM-dd。</filenamepattern></li>
</ol>
<p>RollingFileAppender的file字节点可有可无，通过设置file，可以为活动文件和归档文件指定不同位置，当前日志总是记录到file指定的文件（活动文件），活动文件的名字不会改变；</p>
<p>如果没设置file，活动文件的名字会根据fileNamePattern 的值，每隔一段时间改变一次。“/”或者“\”会被当做目录分隔符。</p>
<ol>
<li><maxhistory>: 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件。</maxhistory></li>
</ol>
<p>假设设置每个月滚动，且<maxhistory>是6，则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是那些为了归档而创建的目录也会被删除。</maxhistory></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">　  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">　      <span class="tag">&lt;<span class="name">file</span>&gt;</span>/home/log/log.log.zip<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">　      </div><div class="line">　　    <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">　　　　　　<span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>logFile.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">　　　　　  <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">　　　　　　<span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">　 <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">　 <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></div><div class="line">　 <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述配置表示每天生成一个日志文件，保存30天的日志文件。</p>
<h6 id="SizeBasedTriggeringPolicy"><a href="#SizeBasedTriggeringPolicy" class="headerlink" title="SizeBasedTriggeringPolicy"></a>SizeBasedTriggeringPolicy</h6><p>class=”ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy”： 查看当前活动文件的大小，如果超过指定大小会告知RollingFileAppender 触发当前活动文件滚动。有以下子节点:</p>
<ol>
<li><maxfilesize>:这是活动文件的大小，默认值是10MB。</maxfilesize></li>
<li><prudent>：当为true时，不支持FixedWindowRollingPolicy。支持TimeBasedRollingPolicy，但是有两个限制，</prudent></li>
</ol>
<p>1不支持也不允许文件压缩<br><br>2不能设置file属性，必须留空。</p>
<ol>
<li><triggeringpolicy>: 告知 RollingFileAppender 合适激活滚动。</triggeringpolicy></li>
</ol>
<h6 id="FixedWindowRollingPolicy"><a href="#FixedWindowRollingPolicy" class="headerlink" title="FixedWindowRollingPolicy"></a>FixedWindowRollingPolicy</h6><p>class=”ch.qos.logback.core.rolling.FixedWindowRollingPolicy” 根据固定窗口算法重命名文件的滚动策略。有以下子节点：</p>
<ol>
<li><minindex>:窗口索引最小值</minindex></li>
<li><maxindex>:窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12。</maxindex></li>
<li><filenamepattern>:必须包含“%i”例如，假设最小值和最大值分别为1和2，命名模式为 mylog%i.log,会产生归档文件mylog1.log和mylog2.log。还可以指定文件压缩选项，例如，mylog%i.log.gz 或者 没有log%i.log.zip<br>　　　　　　例如：</filenamepattern></li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">　  <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">　　    <span class="tag">&lt;<span class="name">file</span>&gt;</span>/home/log/log.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line"></div><div class="line">　      <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span></div><div class="line">　　　　    <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>tests.%i.log.zip<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">minIndex</span>&gt;</span>1<span class="tag">&lt;/<span class="name">minIndex</span>&gt;</span></div><div class="line">　　　　    <span class="tag">&lt;<span class="name">maxIndex</span>&gt;</span>3<span class="tag">&lt;/<span class="name">maxIndex</span>&gt;</span></div><div class="line">　      <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line"></div><div class="line">　      <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></div><div class="line">　　　      <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>5MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></div><div class="line">　　    <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></div><div class="line">　      <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">　　　      <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%-4relative [%thread] %-5level %logger&#123;35&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">　　    <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">　  <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">　  <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>&gt;</span></div><div class="line">　　　　<span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span> /&gt;</span></div><div class="line">　  <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上述配置表示按照固定窗口模式生成日志文件，当文件大于20MB时，生成新的日志文件。窗口大小是1到3，当保存了3个归档文件后，将覆盖最早的日志。
　　　　　　</p>
<h6 id="其他appender"><a href="#其他appender" class="headerlink" title="其他appender"></a>其他appender</h6><p>还有SocketAppender、SMTPAppender、DBAppender、SyslogAppender、SiftingAppender，并不常用，这里就不详解了。</p>
<p>大家可以参考<a href="http://logback.qos.ch/documentation.html" target="_blank" rel="external">官方文档</a>，还可以编写自己的Appender。 </p>
<h5 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点<logger></logger></h5><p>用来设置某一个包或具体的某一个类的日志打印级别、以及指定<appender>。<logger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。<br>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个logger
　　　　　　　　</appender-ref></logger></appender></p>
<ol>
<li>name: 用来指定受此loger约束的某一个包或者具体的某一个类。</li>
<li>level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。 如果未设置此属性，那么当前loger将会继承上级的级别。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"debug"</span>/&gt;</span></div><div class="line"><span class="comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicExtractor"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.QueryParameters"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.query.HQLQueryPlan"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!--myibatis log configure--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>以上是常用的自定义logger配置，方便输出接口请求信息和数据库sql信息等等。</p>
<h5 id="子节点-1"><a href="#子节点-1" class="headerlink" title="子节点"></a>子节点<root></root></h5><p>它也是<logger>元素，但是它是根logger,是所有<logger>的上级。只有一个level属性，因为name已经被命名为”root”,且已经是最上级了。</logger></logger></p>
<ol>
<li>level: 用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL和OFF，不能设置为INHERITED或者同义词NULL。 默认是DEBUG。</li>
</ol>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dailyRollingFileAppender"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">root</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="输出级别"><a href="#输出级别" class="headerlink" title="输出级别"></a>输出级别</h4><p>Logger可以被分配级别。级别包括：TRACE、DEBUG、INFO、WARN 和 ERROR，定义于ch.qos.logback.classic.Level类。如果 logger没有被分配级别，那么它将从有被分配级别的最近的祖先那里继承级别。root logger 默认级别是 DEBUG。</p>
<p>级别排序为： TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR</p>
<h4 id="loback默认配置"><a href="#loback默认配置" class="headerlink" title="loback默认配置"></a>loback默认配置</h4><p>如果配置文件 logback-test.xml 和 logback.xml 都不存在，那么 logback 默认地会调用BasicConfigurator ，创建一个最小化配置。最小化配置由一个关联到根 logger 的ConsoleAppender 组成。输出用模式为%d{HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n 的 PatternLayoutEncoder 进行格式化。root logger 默认级别是 DEBUG。</p>
<p>1、Logback的配置文件</p>
<p>Logback 配置文件的语法非常灵活。正因为灵活，所以无法用 DTD 或 XML schema 进行定义。尽管如此，可以这样描述配置文件的基本结构：以<configuration>开头，后面有零个或多个<appender>元素，有零个或多个<logger>元素，有最多一个<root>元素。</root></logger></appender></configuration></p>
<p>2、Logback默认配置的步骤</p>
<p>(1). 尝试在 classpath下查找文件logback-test.xml；</p>
<p>(2). 如果文件不存在，则查找文件logback.xml；</p>
<p>(3). 如果两个文件都不存在，logback用BasicConfigurator自动对自己进行配置，这会导致记录输出到控制台。</p>
<h3 id="简单的Demo"><a href="#简单的Demo" class="headerlink" title="简单的Demo"></a>简单的Demo</h3><h4 id="选择jar包"><a href="#选择jar包" class="headerlink" title="选择jar包"></a>选择jar包</h4><p><img src="http://img.blog.csdn.net/20170817132845780?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvdTAxMjgwNjc4Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<h4 id="logback-xml"><a href="#logback-xml" class="headerlink" title="logback.xml"></a>logback.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">"true"</span> <span class="attr">scanPeriod</span>=<span class="string">"10 seconds"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 文件输出格式 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"pattern"</span> <span class="attr">value</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; -%5p $&#123;PID:-&#125; [%15.15t] %-40.40logger&#123;39&#125; : %m%n"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"charsetEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!--&lt;PatternLayout pattern="%d&#123;HH:mm:ss.SSS&#125; %-5level %class&#123;36&#125; %L %M - %msg%xEx%n"/&gt;--&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--控制台日志--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.FileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">file</span>&gt;</span>/home/hsy/logback/logfile.log<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">append</span>&gt;</span>true<span class="tag">&lt;/<span class="name">append</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>$&#123;charsetEncoding&#125;<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"dailyRollingFileAppender"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>/home/hsy/logback/log.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.TimeBasedRollingPolicy"</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- daily rollover --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>logback.%d&#123;yyyy-MM-dd&#125;.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- keep 30 days' worth of history --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>30<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">Pattern</span>&gt;</span>$&#123;pattern&#125;<span class="tag">&lt;/<span class="name">Pattern</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"debug"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- show parameters for hibernate sql 专为 Hibernate 定制 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicExtractor"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.QueryParameters"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.engine.query.HQLQueryPlan"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span> /&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!--myibatis log configure--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.apache.ibatis"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Connection"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.Statement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"java.sql.PreparedStatement"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"debug"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"dailyRollingFileAppender"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="代码应用测试"><a href="#代码应用测试" class="headerlink" title="代码应用测试"></a>代码应用测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Logger _logger = LoggerFactory.getLogger(CollectionHelper.class) ;</div><div class="line"><span class="comment">/**</span></div><div class="line"> * <span class="doctag">@description</span> &lt;p&gt;处理的集合元素越多，去重速度更快，10万元素100毫秒，10个元素200毫秒&lt;/p&gt;</div><div class="line"> * <span class="doctag">@param</span> list</div><div class="line"> * <span class="doctag">@return</span></div><div class="line"> * <span class="doctag">@returnType</span> List&lt;Object&gt;</div><div class="line"> * <span class="doctag">@author</span> heshiyuan <span class="doctag">@date</span> 2017年3月16日 下午7:37:53</div><div class="line"> * <span class="doctag">@path</span> javase-common/com.javase.util/CollectionHelper.java</div><div class="line"> * <span class="doctag">@date</span> 2017年3月16日 下午7:37:53</div><div class="line"> * <span class="doctag">@price</span> ￥：三毛三</div><div class="line"> * <span class="doctag">@copyright</span> 如有复制粘贴请通知本人或者捐赠，微信号：hewei1109</div><div class="line"> * <span class="doctag">@email</span> heshiyuan@chtwm.com</div><div class="line"> * <span class="doctag">@callnumber</span> 15910868535</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">duplicateRemoval</span><span class="params">(List&lt;Integer&gt; list)</span> </span>&#123;</div><div class="line">    _logger.info(<span class="string">"CollectionHelper.duplicateRemoval工具类去重开始！"</span>);</div><div class="line">    <span class="keyword">long</span> startTime = System.currentTimeMillis() ;</div><div class="line">    <span class="keyword">try</span>&#123;</div><div class="line">        <span class="keyword">if</span>(list == <span class="keyword">null</span>) &#123;</div><div class="line">            _logger.info(<span class="string">"将要去重的list集合是空，请检查参数再行调用！"</span>);</div><div class="line">            <span class="keyword">long</span> endTime = System.currentTimeMillis() ;</div><div class="line">            _logger.info(<span class="string">"调用去重工具类耗时&#123;&#125;毫秒！"</span>,(endTime - startTime));</div><div class="line">            <span class="keyword">return</span> ;</div><div class="line">        &#125;</div><div class="line">        _logger.info(<span class="string">"去重之前的集合是&#123;&#125;"</span>,list.toString());</div><div class="line">        list = list.parallelStream().distinct().collect(Collectors.toList()) ;</div><div class="line">        _logger.info(<span class="string">"去重之后的集合是&#123;&#125;"</span>,list.toString());</div><div class="line">    &#125;<span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">        _logger.error(<span class="string">"调用去重工具类CollectionHelper.duplicateRemoval遇到异常，异常信息:&#123;&#125;"</span>,e.getMessage());</div><div class="line">        <span class="keyword">throw</span> e ;</div><div class="line">    &#125;<span class="keyword">finally</span>&#123;</div><div class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis() ;</div><div class="line">        _logger.info(<span class="string">"调用去重工具类耗时&#123;&#125;毫秒"</span>,(endTime - startTime));</div><div class="line">        _logger.info(<span class="string">"CollectionHelper.duplicateRemoval工具类去重结束！"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>由于logback别的方面本次没有用到，此博客会后续维护。。。</p>
]]></content>
      
        <categories>
            
            <category> 项目未起，日志先行 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j,java,日志,logback </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[日志框架之1 关于日志的扯淡]]></title>
      <url>/2017/04/26/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E4%B9%8B1_%E5%85%B3%E4%BA%8E%E6%97%A5%E5%BF%97%E7%9A%84%E6%89%AF%E6%B7%A1/</url>
      <content type="html"><![CDATA[<p>日志系统作为一种应用程序服务，对于跟踪调试、程序状态记录、崩溃数据恢复都有着重要的作用。<br><a id="more"></a></p>
<h2 id="日志简介"><a href="#日志简介" class="headerlink" title="日志简介"></a>日志简介</h2><p>对于一个应用程序来说日志记录是必不可少的一部分。线上问题追踪，基于日志的业务逻辑统计分析等都离不开日志。java领域存在多种日志框架，目前常用的日志框架包括Log4j，Log4j 2，Commons Logging，slf4j，logback，jul。如果不是用心归纳过，相信很多java开发者都会混乱。</p>
<h2 id="java日志框架门派"><a href="#java日志框架门派" class="headerlink" title="java日志框架门派"></a>java日志框架门派</h2><ul>
<li><p>Log4j：Apache Log4j是一个基于Java的日志记录工具。它是由Ceki Gülcü首创的，现在则是Apache软件基金会的一个项目。</p>
</li>
<li><p>Log4j 2：Apache Log4j 2是apache开发的一款Log4j的升级产品。</p>
</li>
<li><p>Commons Logging：Apache基金会所属的项目，是一套Java日志接口，之前叫Jakarta Commons Logging，后更名为Commons Logging。</p>
</li>
<li><p>slf4j：类似于Commons Logging，是一套简易Java日志门面，本身并无日志的实现。（Simple Logging Facade for Java，缩写Slf4j）。</p>
</li>
<li><p>Logback：一套日志组件的实现(slf4j阵营)。</p>
</li>
<li><p>Jul (Java Util Logging)：自Java1.4以来的官方日志实现。</p>
</li>
</ul>
<h2 id="Java日志框架门派历史"><a href="#Java日志框架门派历史" class="headerlink" title="Java日志框架门派历史"></a>Java日志框架门派历史</h2><ol>
<li><p>1996年早期，欧洲安全电子市场项目组决定编写它自己的程序跟踪API(Tracing API)。经过不断的完善，这个API终于成为一个十分受欢迎的Java日志软件包，即Log4j。后来Log4j成为Apache基金会项目中的一员。</p>
</li>
<li><p>期间Log4j近乎成了Java社区的日志标准。据说Apache基金会还曾经建议sun引入Log4j到java的标准库中，但Sun拒绝了。</p>
</li>
<li><p>2002年Java1.4发布，Sun推出了自己的日志库JUL(Java Util Logging),其实现基本模仿了Log4j的实现。在JUL出来以前，log4j就已经成为一项成熟的技术，使得log4j在选择上占据了一定的优势。</p>
</li>
<li><p>接着，Apache推出了Jakarta Commons Logging，JCL只是定义了一套日志接口(其内部也提供一个Simple Log的简单实现)，支持运行时动态加载日志组件的实现，也就是说，在你应用代码里，只需调用Commons Logging的接口，底层实现可以是log4j，也可以是Java Util Logging。</p>
</li>
<li><p>后来(2006年)，Ceki Gülcü不适应Apache的工作方式，离开了Apache。然后先后创建了slf4j(日志门面接口，类似于Commons Logging)和Logback(Slf4j的实现)两个项目，并回瑞典创建了QOS公司，QOS官网上是这样描述Logback的：The Generic，Reliable Fast&amp;Flexible Logging Framework(一个通用，可靠，快速且灵活的日志框架)。</p>
</li>
<li><p>现今，Java日志领域被划分为两大阵营：Commons Logging阵营和SLF4J阵营。<br>Commons Logging在Apache大树的笼罩下，有很大的用户基数。但有证据表明，形式正在发生变化。2013年底有人分析了GitHub上30000个项目，统计出了最流行的100个Libraries，可以看出slf4j的发展趋势更好：</p>
</li>
<li>Apache眼看有被Logback反超的势头，于2012-07重写了log4j 1.x，成立了新的项目Log4j 2。Log4j 2具有logback的所有特性。</li>
</ol>
<p><img src="/uploads/logger.png" alt=""></p>
<h2 id="java日志框架门派之间的关系"><a href="#java日志框架门派之间的关系" class="headerlink" title="java日志框架门派之间的关系"></a>java日志框架门派之间的关系</h2><ul>
<li>Log4j2与Log4j1发生了很大的变化，log4j2不兼容log4j1。</li>
<li>Commons Logging和Slf4j是日志门面(门面模式是软件工程中常用的一种软件设计模式，也被称为正面模式、外观模式。它为子系统中的一组接口提供一个统一的高层接口，使得子系统更容易使用)。log4j和Logback则是具体的日志实现方案。可以简单的理解为接口与接口的实现，调用这只需要关注接口而无需关注具体的实现，做到解耦。</li>
<li>比较常用的组合使用方式是slf4j与logback组合使用，Commons Logging与Log4j组合使用。</li>
<li>Logback必须配合Slf4j使用。由于Logback和Slf4j是同一个作者，其兼容性不言而喻。</li>
</ul>
<h2 id="Commons-Logging与Slf4j实现机制对比"><a href="#Commons-Logging与Slf4j实现机制对比" class="headerlink" title="Commons Logging与Slf4j实现机制对比"></a>Commons Logging与Slf4j实现机制对比</h2><h3 id="Commons-logging实现机制"><a href="#Commons-logging实现机制" class="headerlink" title="Commons logging实现机制"></a>Commons logging实现机制</h3><p>Commons logging是通过动态查找机制，在程序运行时，使用自己的ClassLoader寻找和载入本地具体的实现。详细策略可以查看commons-logging-*.jar包中的org.apache.commons.logging.impl.LogFactoryImpl.java文件。由于OSGi不同的插件使用独立的ClassLoader，OSGI的这种机制保证了插件互相独立, 其机制限制了commons logging在OSGi中的正常使用。</p>
<h3 id="Slf4j实现机制"><a href="#Slf4j实现机制" class="headerlink" title="Slf4j实现机制"></a>Slf4j实现机制</h3><p>slf4j在编译期间，静态绑定本地的LOG库，因此可以在OSGi中正常使用。它是通过查找类路径下org.slf4j.impl.StaticLoggerBinder，然后绑定工作都在这类里面进行。</p>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>以上简单的介绍了日志框架各门派之间的异同之处，通过基本的介绍相信读者能够做出自己的日志框架选型，后续的系列博客会详细介绍各个框架的详细运用。敬请期待。。。</p>
]]></content>
      
        <categories>
            
            <category> 日志管理之美 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> log4j,java,日志,logback </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[jdk8自学之1 forEach]]></title>
      <url>/2016/11/13/jdk8%E8%87%AA%E5%AD%A6%E4%B9%8B1%20forEach/</url>
      <content type="html"><![CDATA[<p>forEach是jdk8的新特性<br><a id="more"></a></p>
<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><p>forEach是jdk8的新特性，其源码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Performs the given action for each element of the &#123;<span class="doctag">@code</span> Iterable&#125;</div><div class="line"> * until all elements have been processed or the action throws an</div><div class="line"> * exception.  Unless otherwise specified by the implementing class,</div><div class="line"> * actions are performed in the order of iteration (if an iteration order</div><div class="line"> * is specified).  Exceptions thrown by the action are relayed to the</div><div class="line"> * caller.</div><div class="line"> *</div><div class="line"> * <span class="doctag">@implSpec</span></div><div class="line"> * &lt;p&gt;The default implementation behaves as if:</div><div class="line"> * &lt;pre&gt;&#123;<span class="doctag">@code</span></div><div class="line"> *     for (T t : this)</div><div class="line"> *         action.accept(t);</div><div class="line"> * &#125;&lt;/pre&gt;</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> action The action to be performed for each element</div><div class="line"> * <span class="doctag">@throws</span> NullPointerException if the specified action is null</div><div class="line"> * <span class="doctag">@since</span> 1.8</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">forEach</span><span class="params">(Consumer&lt;? <span class="keyword">super</span> T&gt; action)</span> </span>&#123;</div><div class="line">    Objects.requireNonNull(action);</div><div class="line">    <span class="keyword">for</span> (T t : <span class="keyword">this</span>) &#123;</div><div class="line">        action.accept(t);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><p>观察源码发现,forEach需要传入Consumer&lt;? super T&gt; action接口的实现类，其使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testForEachOfJdk8()&#123;</div><div class="line">    List&lt;Map&lt;String,String&gt;&gt; listMap = new ArrayList&lt;&gt;() ;</div><div class="line"></div><div class="line">    getListMap().forEach(new MyConsumer(listMap));</div><div class="line">    System.out.println(listMap.toString()) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 组装list，用以forEach</div><div class="line">private List&lt;Map&lt;String,String&gt;&gt; getListMap() &#123;</div><div class="line">    List&lt;Map&lt;String,String&gt;&gt; listMap = new ArrayList&lt;&gt;() ;</div><div class="line">    for(int i=1;i&lt;=3;i++)&#123;</div><div class="line">        Map&lt;String,String&gt; map = new HashMap&lt;&gt;() ;</div><div class="line">        map.put(String.valueOf(i),String.valueOf(i)) ;</div><div class="line">        listMap.add(map) ;</div><div class="line">    &#125;</div><div class="line">    return listMap ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class MyConsumer implements Consumer&lt;Map&lt;String,String&gt;&gt;&#123;</div><div class="line">    List&lt;Map&lt;String,String&gt;&gt; listMap = new ArrayList&lt;&gt;() ;</div><div class="line">    public MyConsumer(List&lt;Map&lt;String,String&gt;&gt; listMap) &#123;</div><div class="line">        this.listMap = listMap ;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void accept(Map&lt;String, String&gt; stringStringMap) &#123;</div><div class="line">        listMap.add(stringStringMap) ;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h3><p>引入limbda表达式，可简写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testForEachOfJdk8Of2()&#123;</div><div class="line">    List&lt;Map&lt;String,String&gt;&gt; listMap = new ArrayList&lt;&gt;() ;</div><div class="line">    getListMap().forEach((Map&lt;String,String&gt; maps) -&gt; &#123;</div><div class="line">        listMap.add(maps) ;</div><div class="line">    &#125;);</div><div class="line">    System.out.println(listMap.toString()) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 组装list，用以forEach</div><div class="line">private List&lt;Map&lt;String,String&gt;&gt; getListMap() &#123;</div><div class="line">    List&lt;Map&lt;String,String&gt;&gt; listMap = new ArrayList&lt;&gt;() ;</div><div class="line">    for(int i=1;i&lt;=3;i++)&#123;</div><div class="line">        Map&lt;String,String&gt; map = new HashMap&lt;&gt;() ;</div><div class="line">        map.put(String.valueOf(i),String.valueOf(i)) ;</div><div class="line">        listMap.add(map) ;</div><div class="line">    &#125;</div><div class="line">    return listMap ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进一步简写</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Test</div><div class="line">public void testForEachOfJdk8Of2()&#123;</div><div class="line">    List&lt;Map&lt;String,String&gt;&gt; listMap = new ArrayList&lt;&gt;() ;</div><div class="line">    getListMap().forEach(maps -&gt; listMap.add(maps));</div><div class="line">    System.out.println(listMap.toString()) ;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 组装list，用以forEach</div><div class="line">private List&lt;Map&lt;String,String&gt;&gt; getListMap() &#123;</div><div class="line">    List&lt;Map&lt;String,String&gt;&gt; listMap = new ArrayList&lt;&gt;() ;</div><div class="line">    for(int i=1;i&lt;=3;i++)&#123;</div><div class="line">        Map&lt;String,String&gt; map = new HashMap&lt;&gt;() ;</div><div class="line">        map.put(String.valueOf(i),String.valueOf(i)) ;</div><div class="line">        listMap.add(map) ;</div><div class="line">    &#125;</div><div class="line">    return listMap ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h3><p>欢迎大家纠正</p>
]]></content>
      
        <categories>
            
            <category> jdk8 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> jdk8,forEach,limbda </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
